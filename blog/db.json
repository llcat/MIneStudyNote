{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1532311942700},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1532311942700},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1532311942701},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1532311942701},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1532311942705},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1532311942705},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1532311942705},{"_id":"themes/next/README.md","hash":"2d142fa1bdfab00abf8e99f972346e15572c9b12","modified":1532311942706},{"_id":"themes/next/LICENSE.md","hash":"f0190c7d83a98464549a6b3a51bb206148d88e1b","modified":1532311942706},{"_id":"themes/next/_config.yml","hash":"6c0be436f353eeb928d35ab6fe165d4781fd4de5","modified":1532326531333},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1532311942707},{"_id":"themes/next/bower.json","hash":"72d7f5ef565cca1da30ba64fc04075b9ac99e319","modified":1532311942707},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1532311942718},{"_id":"themes/next/package.json","hash":"735ace0b7fe3b1171c220c5424fcd4fe3aadd7f8","modified":1532311942750},{"_id":"source/_posts/SQL基础.md","hash":"26fa1059441b50d79a5c744417552557a2d16ca3","modified":1531971838791},{"_id":"source/_posts/Spring学习笔记.md","hash":"902713ab9bf5d6c7b7076fd905c419da6011bde3","modified":1531971838792},{"_id":"source/_posts/hexo-githubpages搭建个人blog.md","hash":"9f63b150892d74fd9189beef26e61073c402be2d","modified":1531971838792},{"_id":"source/_posts/java-笔面题总结.md","hash":"9cda4c5f01ac1e7f82c3bc066ff552b34d569d77","modified":1531971838792},{"_id":"source/_posts/了解Map容器.md","hash":"5290e55725ed3d0d57be816f5a5e3ed48caa29f0","modified":1531971838793},{"_id":"source/_posts/初识echarts.md","hash":"fea2e68849a1d1e7d6e5f0de13daa92c8d677cea","modified":1531971838797},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"22f2ccc5522563b67c8663849fc1d6cbae93a8ff","modified":1532311942702},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"869dcd36524e2c61ddd2315c1266edca7f0da6c9","modified":1532311942702},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1532311942702},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"36201119490a04107c8179b10202548a9d0e5e60","modified":1532311942703},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1532311942703},{"_id":"themes/next/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1532311942704},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1532311942679},{"_id":"themes/next/.git/config","hash":"7f8b507977a695e25b27d4c2e8aaed71410536bf","modified":1532311942686},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1532311807567},{"_id":"themes/next/.git/index","hash":"ee44c1c85e2586a4e94786f4c95a5bf96ccb5617","modified":1532317602754},{"_id":"themes/next/.git/packed-refs","hash":"2c83349bff771d4821cd83471778ac16b3270d17","modified":1532311942673},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1532311942708},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1532311942708},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1532311942709},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1532311942709},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1532311942710},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1532311942710},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1532311942711},{"_id":"themes/next/docs/MATH.md","hash":"34a46ca9a05b4570903beaadd4807e6759afb52e","modified":1532311942711},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1532311942712},{"_id":"themes/next/layout/_layout.swig","hash":"2db9b03efc68be842b8f79fe2f0fd7fb09e8885a","modified":1532311942725},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1532311942748},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1532311942749},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1532311942749},{"_id":"themes/next/layout/page.swig","hash":"9ddf40303f82e3db76d59dc82b6d4eadfed203c6","modified":1532311942749},{"_id":"themes/next/layout/post.swig","hash":"0554f42f90f4a524666c2b520be30b689c1d6a87","modified":1532311942749},{"_id":"themes/next/layout/schedule.swig","hash":"d99b9eff0cff38caf095445f27c08aaf11a5b862","modified":1532311942750},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1532311942750},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1532311942718},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1532311942718},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1532311942719},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1532311942719},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1532311942719},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1532311942720},{"_id":"themes/next/languages/ja.yml","hash":"7836f1de1f383d3a53770a03498cc39a37674f0c","modified":1532311942720},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1532311942721},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1532311942721},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1532311942721},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1532311942722},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1532311942722},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1532311942722},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1532311942723},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1532311942723},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1532311942723},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1532311942724},{"_id":"themes/next/scripts/helpers.js","hash":"7849f9b9a86fc82d6e186e32a5e26e1f27c49b47","modified":1532311942751},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1532311942751},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1532311942751},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1532311942806},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1532311942806},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1532311942806},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532311942786},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1532311807568},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1532311807569},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1532311807568},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1532311807569},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1532311807570},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1532311807571},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1532311807571},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1532311807572},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1532311807572},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1532311807573},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1532311807573},{"_id":"themes/next/.git/logs/HEAD","hash":"8cbe6ef782a6e30aed20a00f94f9d84b6878fb3e","modified":1532311942681},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1532311942712},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1532311942713},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1532311942713},{"_id":"themes/next/docs/ru/README.md","hash":"bbe7ac3ef6352b7fedbba2ab800915e33251adf8","modified":1532311942713},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1532311942714},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1532311942714},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1532311942715},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"f2a2d6e68c5f65e27303b40f5285a8a4a5adae4c","modified":1532311942715},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1532311942715},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1532311942716},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"4d68054b062b3c8404b146a155d9624d2d25dd9b","modified":1532311942716},{"_id":"themes/next/docs/zh-CN/README.md","hash":"74547943ee6cba2e2bbbd67d306ee4de9db1a2bd","modified":1532311942717},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1532311942717},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1532311942724},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1532311942724},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1532311942724},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1532311942726},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"8ff97c3f4eb888207bdc50066053c97d890e0202","modified":1532311942726},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1532311942727},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56733f92352b891b0bb1baca293f68f6c8928b0b","modified":1532311942727},{"_id":"themes/next/layout/_macro/post.swig","hash":"00cd242c032341ab0fb5d7f66d4a9aa652eab183","modified":1532311942727},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a9519b4f82aa516e516317d0447bf5c5c7ffb544","modified":1532311942728},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1532311942728},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"4b48fdbfe3bf41ddeda4ff74c1ff17ab9f15c14e","modified":1532311942729},{"_id":"themes/next/layout/_partials/comments.swig","hash":"412d2a0e18a237e490e1b8bce5547558768b9da3","modified":1532311942729},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0d815fc14e58f9ec00b310f7b1d32cc460254610","modified":1532311942729},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"206cbd6ac9ca6a219a8516f59beae25b3c770199","modified":1532311942732},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1532311942733},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"27fb1d81151b9b79683e488579df19eee7e654d6","modified":1532311942735},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"f544e21883d249d5a341c684c97bd25831008f07","modified":1532311942735},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"f8c7e729ad6e72b4c705a2c5d5041589c2b4cc52","modified":1532311942736},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f134aeb8d5bee351e5277edb92ac694af314b75f","modified":1532311942737},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"ed62ea83d3f2c9db2ea57bf23a7d765ed82504c2","modified":1532311942741},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c62c37474c8de78cf34e54c6219b503ec28d9815","modified":1532311942743},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"53861f78a1fb52e96a43cf6909e1530dcf6cbff8","modified":1532311942743},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"736cb278fa09d3b4ed6f305b56353941ea918793","modified":1532311942743},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1532311942745},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"ccf0035086e14dcefa24c2907301edf4c37d5448","modified":1532311942745},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1532311942745},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1532311942745},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"a174d4a0c9188f9c4a2652f49bfa7a60ad0a83e3","modified":1532311942746},{"_id":"themes/next/scripts/tags/button.js","hash":"510f3711a9c9d3e2a844250647d90e8359e7d130","modified":1532311942752},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1532311942752},{"_id":"themes/next/scripts/tags/exturl.js","hash":"83e48148d2f4f8543f6833effa8a26eb0b60f2f0","modified":1532311942752},{"_id":"themes/next/scripts/tags/full-image.js","hash":"ef2c2985a3edb9f69740740c5bc42d4b692c86fd","modified":1532311942753},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"2b969ca830862b2bc119b69ede4bd971e27a6ff8","modified":1532311942753},{"_id":"themes/next/scripts/tags/label.js","hash":"bb502616bfabe85de5de903074ec6afe627f8413","modified":1532311942754},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"c68b1e6d4a8236d6731e4175ef3ddc284255d63b","modified":1532311942753},{"_id":"themes/next/scripts/tags/note.js","hash":"bd3310a5890bded1bda9ba3ad6f98ee44ecb101a","modified":1532311942754},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2d257e26718d4011509fd6f530d2ea37e50e3e66","modified":1532311942754},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1532311942786},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1532311942787},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1532311942788},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1532311942787},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1532311942787},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1532311942788},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1532311942789},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1532311942789},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1532311942789},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1532311942789},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1532311942790},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1532311942790},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1532311942790},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1532311942790},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1532311942790},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1532311942791},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1532311942791},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1532311942791},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1532311942791},{"_id":"source/_posts/了解Map容器/how_to_hash.png","hash":"f77975780b6cbc003a5f27fe55b8a90702b857d6","modified":1531971838796},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532311942736},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532311942736},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532311942777},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532311942777},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532311942777},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532311942785},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532311942786},{"_id":"themes/next/.git/refs/heads/master","hash":"ad4333ec93314ec291cee178328c4bc621c5c6e6","modified":1532311942681},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1532311942725},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"aab518204d3125e948796a9ba6b56b09cade2d92","modified":1532311942726},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1532311942730},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0b8349710caf9691741a457aa746add35245048e","modified":1532311942730},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"09109a5c5a301e7cc5e3c7aec32b0164739fc7d4","modified":1532311942730},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"19050627bc23b0b2c2e65e7248c0f88468eb8ea5","modified":1532311942731},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1532311942731},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1532311942731},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"3f11ae8e9084f39628cd2006931d39a2069b9dd6","modified":1532311942732},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1532311942733},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1532311942733},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1532311942733},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1532311942734},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1532311942734},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1532311942734},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1532311942735},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"580e9d9c4d8783ee6200d845ae16c98979bf1ea3","modified":1532311942736},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1532311942736},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1532311942737},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1532311942737},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1532311942738},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"c43f41b7f3c0743d1e673af2e787ea34a67fc9cb","modified":1532311942738},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1532311942738},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1532311942738},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1532311942739},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"d67d9a176a276cdab6f2bcb7eb3650fbca5459c4","modified":1532311942739},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1532311942739},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1532311942739},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"809f6d31c24ee0012e12631f5893a79f69e7bc84","modified":1532311942740},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1532311942740},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1532311942740},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1532311942741},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1532311942741},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1532311942742},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"4a2d2269f23e90c1311bd867d22def0b4a092bf1","modified":1532311942741},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"34cc66d4dbada2d561ba6f70fd9a75207c5adbd4","modified":1532311942742},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"694483f2d853c65b87a6a70e38dbc40e40eb1332","modified":1532311942742},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"d05e70a416963023ee1978e4168d58bcfd956ed3","modified":1532311942742},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1532311942744},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1532311942744},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c0c2fd87e71f0beb542aa50c0bc875da5aa5c44b","modified":1532311942744},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1532311942747},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"71c897f9b107dd0de1b7f649633cf583c206a9db","modified":1532311942747},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1532311942747},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1532311942748},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1532311942776},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1532311942777},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1532311942777},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0882d76333ab409e8d3362c284b91a0f0ae761ae","modified":1532311942777},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1532311942785},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8d6cf29f63c90364f4d3c336f7c9bb794b4c46cc","modified":1532311942785},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"72927abd51d3a607a6ba32cf882390792b34e834","modified":1532311942786},{"_id":"themes/next/source/css/_variables/base.styl","hash":"1625e3e1da6c453108526e027dae25e311b18adf","modified":1532311942786},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1532311942792},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1532311942792},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1532311942793},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1532311942792},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1532311942793},{"_id":"themes/next/source/js/src/motion.js","hash":"6b5a2646b775609630b9ff6221fa58b6823a25fa","modified":1532311942793},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1532311942794},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1532311942794},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1532311942795},{"_id":"themes/next/source/js/src/utils.js","hash":"9cddff04f9ff64b1e3202e1726eff512a2ef8497","modified":1532311942795},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1532311942796},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1532311942795},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1532311942796},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1532311942796},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1532311942796},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1532311942805},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1532311942805},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1532311942805},{"_id":"themes/next/.git/objects/pack/pack-218af9228c03e089e670f8fdb283f85e59454bf5.idx","hash":"9a346499b841eb0f7712ec210d0f41803a7097db","modified":1532311942601},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1532311942802},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"8cbe6ef782a6e30aed20a00f94f9d84b6878fb3e","modified":1532311942682},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1532311942678},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1532311942746},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1532311942746},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1532311942755},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1532311942755},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1532311942756},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1532311942755},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1532311942756},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1532311942761},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1532311942768},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"fbb6be577529c750ef7c872fe7abdc7ab0faf0f8","modified":1532311942774},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1532311942775},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"97bb39756e85f5b27bba7f43270105ad01d736c9","modified":1532311942775},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1532311942775},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1532311942776},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"52bc8ba71b91d954530b35dfc63b402a02b1321d","modified":1532311942776},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1532311942775},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7e4e499964c2112d47e6f9d2b6e87c31ec8269e2","modified":1532311942778},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1532311942781},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1532311942781},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1532311942782},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"3cc7646583218d16925ced7b70865e63a901d4a7","modified":1532311942782},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1532311942782},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1532311942778},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1532311942778},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f3aa863adf972569b72f2df6bc6a914e7daace99","modified":1532311942779},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1532311942779},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1532311942779},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1532311942779},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1532311942780},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1532311942783},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"cc961108b12ab97d9216606ceb1cd1cd31ab20f0","modified":1532311942783},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ccf5a4761cb0ce451b5e994cfabf8769248a45c1","modified":1532311942783},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"df16dc995eb9ad498df2edcfc3e20528fc9aa133","modified":1532311942784},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1532311942784},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"be72740313a9a0477b8a22f62e4c8ffa6d23a2e5","modified":1532311942784},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1532311942785},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"6ed3f2389457daa382de96a08633d9faaaaf53fb","modified":1532311942794},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1532311942797},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1532311942798},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1532311942797},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1532311942802},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1532311942803},{"_id":"source/_posts/了解Map容器/abstract_map.jpg","hash":"4286a911b90d3bb2439c11d1c288c2925f99c63c","modified":1531971838795},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1532311942800},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1532311942801},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1532311942804},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"8cbe6ef782a6e30aed20a00f94f9d84b6878fb3e","modified":1532311942678},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1532311942757},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"835c1340571bd6c4ec263c482cf13283fb047e49","modified":1532311942759},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1532311942758},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1532311942759},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1532311942757},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1532311942757},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1532311942757},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1532311942758},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1532311942758},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1532311942758},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1532311942759},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1532311942760},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1532311942760},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1532311942760},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1532311942760},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1532311942760},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1532311942761},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1532311942761},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1532311942762},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1532311942762},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1532311942762},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1532311942763},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1532311942763},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1532311942763},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1532311942763},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1532311942764},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1532311942764},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1532311942764},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"adfd6d2d3b34adc4b476a0ea91e19020456a3b1a","modified":1532311942764},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1532311942765},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5c3141d58970a0614896b6a62fd7a8a8caf4e401","modified":1532311942765},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bb8162bb7c7b0b255a0e8e234eb382a0879a4962","modified":1532311942765},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1532311942766},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"debe322cc9e2688ecf38d0b6afcd6b71ad02fbd0","modified":1532311942766},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1532311942766},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1532311942766},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1532311942766},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1532311942767},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1532311942767},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1532311942767},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1532311942768},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1532311942768},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1532311942772},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1532311942772},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1532311942772},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1532311942772},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1532311942773},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1532311942773},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1532311942774},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"c31fbaec7e6373ecfb8588500b972d451695a6ad","modified":1532311942774},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1532311942769},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"02ee0eb49c256ecb4e71bbc65072f9147418d7d7","modified":1532311942769},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1532311942769},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1532311942769},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1532311942771},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1532311942770},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1532311942771},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1532311942771},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1532311942771},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1532311942782},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1532311942780},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1532311942781},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1532311942800},{"_id":"themes/next/.git/objects/pack/pack-218af9228c03e089e670f8fdb283f85e59454bf5.pack","hash":"89456d2c11b1e47fdab5207317ff822911b156b6","modified":1532311942632}],"Category":[{"name":"database","_id":"cjjxxlrpt0002b4htxud10zgg"},{"name":"spring-framework","_id":"cjjxxlrpy0007b4httj1iv95a"},{"name":"java","_id":"cjjxxlrq1000cb4htj464lay6"},{"name":"tool","_id":"cjjxxlrq2000gb4htqk8a5zzv"},{"name":"others","_id":"cjjxxlrq5000lb4htele5xmtk"}],"Data":[],"Page":[],"Post":[{"title":"SQL基础","date":"2017-04-20T11:53:45.000Z","_content":"\n#### 梳理一遍SQL的基本语法\n\n本文是对SQL基础语法( 主要是MySQL）的一个回顾和总结，从最基础的单表查询开始，对查询结果进行过滤，排序，分组，聚合等操作，以及后续表连接查询，插入，更新删除数据，使用视图，存储过程，管理事务处理等知识点的回顾。\n\n> 参考书目\n《SQL必知必会》，下面实验中使用表及数据均是本书作者提供的，我写这篇文章的目的是对本书中所有的例子进行动手实现，加强自己对SQL语法的理解。如果你感兴趣的话和我一起吧！\n[建表及数据资源](http://www.forta.com/books/0672336073)\n \n目录：\n\n- [检索数据](#ch2)\n- [排序检索数据](#ch3)\n- [过滤数据](#ch4)\n- [使用函数](#)\n- \n\n<br>\n<h5 id='ch2'>检索数据</h5>\n\n**虽然SQL并不区分大小写，但由于不同软件的实现不同，导致有差异，如mysql忽略关键字和列名大小写，但是对表名的大小写是敏感的，这里我们规定下SQL的写法，对于关键字统一采用大写，表名使用大写开头，列名默认情况下使用小写，方便理解**\n\n1. 单列，多列，所有列 ( *通配 )\n```sql\n-- 检索单列\nSELECT prod_name FROM Products;\n-- 检索多列\nSELECT prod_id, prod_name, prod_price FROM Products;\n-- 检索表中的所有列\nSELECT * FROM Products; \n```\n\n2. 检索不同的值(去重)&限制结果集大小\n\n**DISTINCT关键字：**\nDISTINCT关键字作用于后面跟随的所有列，不仅仅是只作用于紧跟于其后的一列\n\n**LIMIT 和 OFFSET 关键字：**\nLIMIT关键字是用来限制返回结果集的大小的，而OFFSET关键字是定义开始限制的位置，也就是在结果集中的偏移量。\n一般我们这样使用: LIMIT 5 OFFSET 2；\n在MYSQL中可以只使用LIMIT关键字来定义偏移值和返回的结果集大小：LIMIT NUM1, NUM2 {NUM1:偏移量，NUM2：返回结果集大小}\n\n```sql\n-- 检索不同的值\n-- 不使用DISTINCT关键字时，由于一个厂家生产多个产品，所以会有多个相同的厂商id\nSELECT DISTINCT vend_id FROM Products;\n-- 检索去除厂商id和价格都相同的行\nSELECT DISTINCT vend_id, prod_prices FROM Products;\n-- 返回查询结果集的从第3条到7条数据，MySQL中行数从0开始算。\nSELECT prod_name FROM Products LIMIT 2, 5;\nSELECT prod_name FROM Products LIMIT 5 OFFSET 2;\n```\n\n<h5 id='ch3'>排序检索数据</h5>\n\n1. 排序检索的数据\n\n**ORDER BY 关键字：**\nORDER BY 关键字对查询的结果集进行排序，注意，ORDER BY 子句一定是一条SELECT语句的最后一个子句，ORDER BY不仅可以根据单列，多列排序，还可以通过关键字DESC(DESCENDING)，ASC(ASCENDING，升序是默认的排序方式，可以不指定)\n\n```sql\n-- 根据单列排序\nSELECT prod_name FROM Products ORDER BY prod_name;\n\n-- 根据多列排序(会现根据第一列排好序，在保证第一列有序(有相同值，如下面例子中的prod_price价格相等时）的情况下对指定的第2列进行排序，后面指定的字段依照此规则)\nSELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price, prod_name;\n\n-- 检索结果按照prod_price, prod_name降序排列\nSELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price DESC , prod_name DESC;\n```\ntips：\n并非一定只能指定检索的字段，还可以制定排序的字段是表中存在的其他字段。\nDESC关键字仅对修饰的一个字段起作用，要多个降序排列，请指定多个DESC字段。\n\n<h5 id='ch4'>过滤数据</h5>\n\n**WHERE关键字：**\n数据库表中通常情况下保存了大量的数据，一般业务情况下我们不可能需要全部的数据，我们需要指定一些条件对查询的结果集做限定，这些条件我们称为搜索条件，也叫过滤条件。\n\n1. where支持的比较操作符\n\n操作符 | 说明 | 操作符 | 说明\n- | - | - | - \n=| 等于 | > | 大于\n<> | 不等于 | >= | 大于等于\n!= | 不等于 | !> | 不大于\n< | 小于 | BETWEEN | 在两个值之间\n<= | 小于等于 | IS NULL | 为 NULL值\n!< | 不小于\n\n\n```sql\n-- 等于操作\nSELECT prod_name, prod_price FROM Products WHERE prod_price= 3.49;\n-- 不等于操作\nSELECT vend_id, prod_name FROM Products WHERE vend_id != 'DLL01';\n-- BETWEEN操作\nSELECT prod_name , prod_price FROM Products WHRER prod_price BETWEEN 5 AND 10;\n-- IS NULL判断\nSELECT prod_name FROM Products WHERE prod_prices IS NULL;\n```\n\n2. 高级数据过滤\n\n**AND, OR 组合查询条件**\n\n可以使用 AND 和 OR 组合查询条件，但是要注意，在进行复杂组合使用时我们最好能对条件进行分组，不要依赖默认求值顺序。AND的优先级高于OR。\n\n```SQL\n-- 注意组合AND和OR操作符时，最好组合括号使用，不要依赖默认求值逻辑(下面这个例子，如果去掉括号，会先进行AND运算求值，再将条件作为OR运算的条件)\nSELECT prod_name, prod_price FROM Products WHERE (vend_id = 'DLL01' OR vend_id='BRS01') AND prod_price >=10;\n```\n\n**IN, NOT关键字**\n\nIN操作符用来指定一个条件集合，字段只需满足条件集合中任一条件即可。\n\nNOT操作符用来否定其后跟随的任何查询条件，因此NOT不单独使用，需要与其他操作符一起使用\n\n```SQL\n-- 查找vend_id字段等于'DLL01'或者是'BRS01'的商品\nSELECT prod_name, prod_price FROM Products WHERE vend_id IN ( 'DLL01', 'BRS01');\n\n-- 查找 vend_id字段不等于'DLL01'的商品\nSELECT prod_name,prod_price FROM Products WHERE NOT vend_id = 'DLL01';\n\n-- 结合IN使用\nSELECT prod_name, prod_price FROM Products WHERE vend_id NOT IN ( 'DLL01', 'BRS01');\n\n```\n\n**通配符过滤**\n\n我们有时候并不能确定自己想要的数据在\n\n\n\n<h5 id='ch'></h5>\n\n\n\n\n","source":"_posts/SQL基础.md","raw":"---\ntitle: SQL基础\ndate: 2017-04-20 19:53:45\ntags: MySQL\ncategories: database\n---\n\n#### 梳理一遍SQL的基本语法\n\n本文是对SQL基础语法( 主要是MySQL）的一个回顾和总结，从最基础的单表查询开始，对查询结果进行过滤，排序，分组，聚合等操作，以及后续表连接查询，插入，更新删除数据，使用视图，存储过程，管理事务处理等知识点的回顾。\n\n> 参考书目\n《SQL必知必会》，下面实验中使用表及数据均是本书作者提供的，我写这篇文章的目的是对本书中所有的例子进行动手实现，加强自己对SQL语法的理解。如果你感兴趣的话和我一起吧！\n[建表及数据资源](http://www.forta.com/books/0672336073)\n \n目录：\n\n- [检索数据](#ch2)\n- [排序检索数据](#ch3)\n- [过滤数据](#ch4)\n- [使用函数](#)\n- \n\n<br>\n<h5 id='ch2'>检索数据</h5>\n\n**虽然SQL并不区分大小写，但由于不同软件的实现不同，导致有差异，如mysql忽略关键字和列名大小写，但是对表名的大小写是敏感的，这里我们规定下SQL的写法，对于关键字统一采用大写，表名使用大写开头，列名默认情况下使用小写，方便理解**\n\n1. 单列，多列，所有列 ( *通配 )\n```sql\n-- 检索单列\nSELECT prod_name FROM Products;\n-- 检索多列\nSELECT prod_id, prod_name, prod_price FROM Products;\n-- 检索表中的所有列\nSELECT * FROM Products; \n```\n\n2. 检索不同的值(去重)&限制结果集大小\n\n**DISTINCT关键字：**\nDISTINCT关键字作用于后面跟随的所有列，不仅仅是只作用于紧跟于其后的一列\n\n**LIMIT 和 OFFSET 关键字：**\nLIMIT关键字是用来限制返回结果集的大小的，而OFFSET关键字是定义开始限制的位置，也就是在结果集中的偏移量。\n一般我们这样使用: LIMIT 5 OFFSET 2；\n在MYSQL中可以只使用LIMIT关键字来定义偏移值和返回的结果集大小：LIMIT NUM1, NUM2 {NUM1:偏移量，NUM2：返回结果集大小}\n\n```sql\n-- 检索不同的值\n-- 不使用DISTINCT关键字时，由于一个厂家生产多个产品，所以会有多个相同的厂商id\nSELECT DISTINCT vend_id FROM Products;\n-- 检索去除厂商id和价格都相同的行\nSELECT DISTINCT vend_id, prod_prices FROM Products;\n-- 返回查询结果集的从第3条到7条数据，MySQL中行数从0开始算。\nSELECT prod_name FROM Products LIMIT 2, 5;\nSELECT prod_name FROM Products LIMIT 5 OFFSET 2;\n```\n\n<h5 id='ch3'>排序检索数据</h5>\n\n1. 排序检索的数据\n\n**ORDER BY 关键字：**\nORDER BY 关键字对查询的结果集进行排序，注意，ORDER BY 子句一定是一条SELECT语句的最后一个子句，ORDER BY不仅可以根据单列，多列排序，还可以通过关键字DESC(DESCENDING)，ASC(ASCENDING，升序是默认的排序方式，可以不指定)\n\n```sql\n-- 根据单列排序\nSELECT prod_name FROM Products ORDER BY prod_name;\n\n-- 根据多列排序(会现根据第一列排好序，在保证第一列有序(有相同值，如下面例子中的prod_price价格相等时）的情况下对指定的第2列进行排序，后面指定的字段依照此规则)\nSELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price, prod_name;\n\n-- 检索结果按照prod_price, prod_name降序排列\nSELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price DESC , prod_name DESC;\n```\ntips：\n并非一定只能指定检索的字段，还可以制定排序的字段是表中存在的其他字段。\nDESC关键字仅对修饰的一个字段起作用，要多个降序排列，请指定多个DESC字段。\n\n<h5 id='ch4'>过滤数据</h5>\n\n**WHERE关键字：**\n数据库表中通常情况下保存了大量的数据，一般业务情况下我们不可能需要全部的数据，我们需要指定一些条件对查询的结果集做限定，这些条件我们称为搜索条件，也叫过滤条件。\n\n1. where支持的比较操作符\n\n操作符 | 说明 | 操作符 | 说明\n- | - | - | - \n=| 等于 | > | 大于\n<> | 不等于 | >= | 大于等于\n!= | 不等于 | !> | 不大于\n< | 小于 | BETWEEN | 在两个值之间\n<= | 小于等于 | IS NULL | 为 NULL值\n!< | 不小于\n\n\n```sql\n-- 等于操作\nSELECT prod_name, prod_price FROM Products WHERE prod_price= 3.49;\n-- 不等于操作\nSELECT vend_id, prod_name FROM Products WHERE vend_id != 'DLL01';\n-- BETWEEN操作\nSELECT prod_name , prod_price FROM Products WHRER prod_price BETWEEN 5 AND 10;\n-- IS NULL判断\nSELECT prod_name FROM Products WHERE prod_prices IS NULL;\n```\n\n2. 高级数据过滤\n\n**AND, OR 组合查询条件**\n\n可以使用 AND 和 OR 组合查询条件，但是要注意，在进行复杂组合使用时我们最好能对条件进行分组，不要依赖默认求值顺序。AND的优先级高于OR。\n\n```SQL\n-- 注意组合AND和OR操作符时，最好组合括号使用，不要依赖默认求值逻辑(下面这个例子，如果去掉括号，会先进行AND运算求值，再将条件作为OR运算的条件)\nSELECT prod_name, prod_price FROM Products WHERE (vend_id = 'DLL01' OR vend_id='BRS01') AND prod_price >=10;\n```\n\n**IN, NOT关键字**\n\nIN操作符用来指定一个条件集合，字段只需满足条件集合中任一条件即可。\n\nNOT操作符用来否定其后跟随的任何查询条件，因此NOT不单独使用，需要与其他操作符一起使用\n\n```SQL\n-- 查找vend_id字段等于'DLL01'或者是'BRS01'的商品\nSELECT prod_name, prod_price FROM Products WHERE vend_id IN ( 'DLL01', 'BRS01');\n\n-- 查找 vend_id字段不等于'DLL01'的商品\nSELECT prod_name,prod_price FROM Products WHERE NOT vend_id = 'DLL01';\n\n-- 结合IN使用\nSELECT prod_name, prod_price FROM Products WHERE vend_id NOT IN ( 'DLL01', 'BRS01');\n\n```\n\n**通配符过滤**\n\n我们有时候并不能确定自己想要的数据在\n\n\n\n<h5 id='ch'></h5>\n\n\n\n\n","slug":"SQL基础","published":1,"updated":"2018-07-19T03:43:58.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjxxlrpm0000b4htf93n4rrs","content":"<h4 id=\"梳理一遍SQL的基本语法\"><a href=\"#梳理一遍SQL的基本语法\" class=\"headerlink\" title=\"梳理一遍SQL的基本语法\"></a>梳理一遍SQL的基本语法</h4><p>本文是对SQL基础语法( 主要是MySQL）的一个回顾和总结，从最基础的单表查询开始，对查询结果进行过滤，排序，分组，聚合等操作，以及后续表连接查询，插入，更新删除数据，使用视图，存储过程，管理事务处理等知识点的回顾。</p>\n<blockquote>\n<p>参考书目<br>《SQL必知必会》，下面实验中使用表及数据均是本书作者提供的，我写这篇文章的目的是对本书中所有的例子进行动手实现，加强自己对SQL语法的理解。如果你感兴趣的话和我一起吧！<br><a href=\"http://www.forta.com/books/0672336073\" target=\"_blank\" rel=\"noopener\">建表及数据资源</a></p>\n</blockquote>\n<p>目录：</p>\n<ul>\n<li><a href=\"#ch2\">检索数据</a></li>\n<li><a href=\"#ch3\">排序检索数据</a></li>\n<li><a href=\"#ch4\">过滤数据</a></li>\n<li><a href=\"#\">使用函数</a></li>\n<li></li>\n</ul>\n<p><br></p>\n<h5 id=\"ch2\">检索数据</h5>\n\n<p><strong>虽然SQL并不区分大小写，但由于不同软件的实现不同，导致有差异，如mysql忽略关键字和列名大小写，但是对表名的大小写是敏感的，这里我们规定下SQL的写法，对于关键字统一采用大写，表名使用大写开头，列名默认情况下使用小写，方便理解</strong></p>\n<ol>\n<li><p>单列，多列，所有列 ( *通配 )</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 检索单列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> Products;</span><br><span class=\"line\"><span class=\"comment\">-- 检索多列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name, prod_price <span class=\"keyword\">FROM</span> Products;</span><br><span class=\"line\"><span class=\"comment\">-- 检索表中的所有列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Products;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检索不同的值(去重)&amp;限制结果集大小</p>\n</li>\n</ol>\n<p><strong>DISTINCT关键字：</strong><br>DISTINCT关键字作用于后面跟随的所有列，不仅仅是只作用于紧跟于其后的一列</p>\n<p><strong>LIMIT 和 OFFSET 关键字：</strong><br>LIMIT关键字是用来限制返回结果集的大小的，而OFFSET关键字是定义开始限制的位置，也就是在结果集中的偏移量。<br>一般我们这样使用: LIMIT 5 OFFSET 2；<br>在MYSQL中可以只使用LIMIT关键字来定义偏移值和返回的结果集大小：LIMIT NUM1, NUM2 {NUM1:偏移量，NUM2：返回结果集大小}</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 检索不同的值</span></span><br><span class=\"line\"><span class=\"comment\">-- 不使用DISTINCT关键字时，由于一个厂家生产多个产品，所以会有多个相同的厂商id</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> vend_id <span class=\"keyword\">FROM</span> Products;</span><br><span class=\"line\"><span class=\"comment\">-- 检索去除厂商id和价格都相同的行</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> vend_id, prod_prices <span class=\"keyword\">FROM</span> Products;</span><br><span class=\"line\"><span class=\"comment\">-- 返回查询结果集的从第3条到7条数据，MySQL中行数从0开始算。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">LIMIT</span> <span class=\"number\">2</span>, <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">LIMIT</span> <span class=\"number\">5</span> <span class=\"keyword\">OFFSET</span> <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<h5 id=\"ch3\">排序检索数据</h5>\n\n<ol>\n<li>排序检索的数据</li>\n</ol>\n<p><strong>ORDER BY 关键字：</strong><br>ORDER BY 关键字对查询的结果集进行排序，注意，ORDER BY 子句一定是一条SELECT语句的最后一个子句，ORDER BY不仅可以根据单列，多列排序，还可以通过关键字DESC(DESCENDING)，ASC(ASCENDING，升序是默认的排序方式，可以不指定)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 根据单列排序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 根据多列排序(会现根据第一列排好序，在保证第一列有序(有相同值，如下面例子中的prod_price价格相等时）的情况下对指定的第2列进行排序，后面指定的字段依照此规则)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price, prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 检索结果按照prod_price, prod_name降序排列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price <span class=\"keyword\">DESC</span> , prod_name <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>\n<p>tips：<br>并非一定只能指定检索的字段，还可以制定排序的字段是表中存在的其他字段。<br>DESC关键字仅对修饰的一个字段起作用，要多个降序排列，请指定多个DESC字段。</p>\n<h5 id=\"ch4\">过滤数据</h5>\n\n<p><strong>WHERE关键字：</strong><br>数据库表中通常情况下保存了大量的数据，一般业务情况下我们不可能需要全部的数据，我们需要指定一些条件对查询的结果集做限定，这些条件我们称为搜索条件，也叫过滤条件。</p>\n<ol>\n<li>where支持的比较操作符</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>说明</th>\n<th>操作符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>等于</td>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&lt;&gt;</td>\n<td>不等于</td>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>!&gt;</td>\n<td>不大于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>BETWEEN</td>\n<td>在两个值之间</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>IS NULL</td>\n<td>为 NULL值</td>\n</tr>\n<tr>\n<td>!&lt;</td>\n<td>不小于</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 等于操作</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> prod_price= <span class=\"number\">3.49</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 不等于操作</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_id, prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> vend_id != <span class=\"string\">'DLL01'</span>;</span><br><span class=\"line\"><span class=\"comment\">-- BETWEEN操作</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name , prod_price <span class=\"keyword\">FROM</span> Products WHRER prod_price <span class=\"keyword\">BETWEEN</span> <span class=\"number\">5</span> <span class=\"keyword\">AND</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">-- IS NULL判断</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> prod_prices <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>高级数据过滤</li>\n</ol>\n<p><strong>AND, OR 组合查询条件</strong></p>\n<p>可以使用 AND 和 OR 组合查询条件，但是要注意，在进行复杂组合使用时我们最好能对条件进行分组，不要依赖默认求值顺序。AND的优先级高于OR。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 注意组合AND和OR操作符时，最好组合括号使用，不要依赖默认求值逻辑(下面这个例子，如果去掉括号，会先进行AND运算求值，再将条件作为OR运算的条件)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> (vend_id = <span class=\"string\">'DLL01'</span> <span class=\"keyword\">OR</span> vend_id=<span class=\"string\">'BRS01'</span>) <span class=\"keyword\">AND</span> prod_price &gt;=<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>IN, NOT关键字</strong></p>\n<p>IN操作符用来指定一个条件集合，字段只需满足条件集合中任一条件即可。</p>\n<p>NOT操作符用来否定其后跟随的任何查询条件，因此NOT不单独使用，需要与其他操作符一起使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查找vend_id字段等于'DLL01'或者是'BRS01'的商品</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> vend_id <span class=\"keyword\">IN</span> ( <span class=\"string\">'DLL01'</span>, <span class=\"string\">'BRS01'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查找 vend_id字段不等于'DLL01'的商品</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name,prod_price <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> vend_id = <span class=\"string\">'DLL01'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 结合IN使用</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> vend_id <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> ( <span class=\"string\">'DLL01'</span>, <span class=\"string\">'BRS01'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>通配符过滤</strong></p>\n<p>我们有时候并不能确定自己想要的数据在</p>\n<h5 id=\"ch\"></h5>\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"梳理一遍SQL的基本语法\"><a href=\"#梳理一遍SQL的基本语法\" class=\"headerlink\" title=\"梳理一遍SQL的基本语法\"></a>梳理一遍SQL的基本语法</h4><p>本文是对SQL基础语法( 主要是MySQL）的一个回顾和总结，从最基础的单表查询开始，对查询结果进行过滤，排序，分组，聚合等操作，以及后续表连接查询，插入，更新删除数据，使用视图，存储过程，管理事务处理等知识点的回顾。</p>\n<blockquote>\n<p>参考书目<br>《SQL必知必会》，下面实验中使用表及数据均是本书作者提供的，我写这篇文章的目的是对本书中所有的例子进行动手实现，加强自己对SQL语法的理解。如果你感兴趣的话和我一起吧！<br><a href=\"http://www.forta.com/books/0672336073\" target=\"_blank\" rel=\"noopener\">建表及数据资源</a></p>\n</blockquote>\n<p>目录：</p>\n<ul>\n<li><a href=\"#ch2\">检索数据</a></li>\n<li><a href=\"#ch3\">排序检索数据</a></li>\n<li><a href=\"#ch4\">过滤数据</a></li>\n<li><a href=\"#\">使用函数</a></li>\n<li></li>\n</ul>\n<p><br></p>\n<h5 id=\"ch2\">检索数据</h5>\n\n<p><strong>虽然SQL并不区分大小写，但由于不同软件的实现不同，导致有差异，如mysql忽略关键字和列名大小写，但是对表名的大小写是敏感的，这里我们规定下SQL的写法，对于关键字统一采用大写，表名使用大写开头，列名默认情况下使用小写，方便理解</strong></p>\n<ol>\n<li><p>单列，多列，所有列 ( *通配 )</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 检索单列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> Products;</span><br><span class=\"line\"><span class=\"comment\">-- 检索多列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_name, prod_price <span class=\"keyword\">FROM</span> Products;</span><br><span class=\"line\"><span class=\"comment\">-- 检索表中的所有列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> Products;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检索不同的值(去重)&amp;限制结果集大小</p>\n</li>\n</ol>\n<p><strong>DISTINCT关键字：</strong><br>DISTINCT关键字作用于后面跟随的所有列，不仅仅是只作用于紧跟于其后的一列</p>\n<p><strong>LIMIT 和 OFFSET 关键字：</strong><br>LIMIT关键字是用来限制返回结果集的大小的，而OFFSET关键字是定义开始限制的位置，也就是在结果集中的偏移量。<br>一般我们这样使用: LIMIT 5 OFFSET 2；<br>在MYSQL中可以只使用LIMIT关键字来定义偏移值和返回的结果集大小：LIMIT NUM1, NUM2 {NUM1:偏移量，NUM2：返回结果集大小}</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 检索不同的值</span></span><br><span class=\"line\"><span class=\"comment\">-- 不使用DISTINCT关键字时，由于一个厂家生产多个产品，所以会有多个相同的厂商id</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> vend_id <span class=\"keyword\">FROM</span> Products;</span><br><span class=\"line\"><span class=\"comment\">-- 检索去除厂商id和价格都相同的行</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> vend_id, prod_prices <span class=\"keyword\">FROM</span> Products;</span><br><span class=\"line\"><span class=\"comment\">-- 返回查询结果集的从第3条到7条数据，MySQL中行数从0开始算。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">LIMIT</span> <span class=\"number\">2</span>, <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">LIMIT</span> <span class=\"number\">5</span> <span class=\"keyword\">OFFSET</span> <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<h5 id=\"ch3\">排序检索数据</h5>\n\n<ol>\n<li>排序检索的数据</li>\n</ol>\n<p><strong>ORDER BY 关键字：</strong><br>ORDER BY 关键字对查询的结果集进行排序，注意，ORDER BY 子句一定是一条SELECT语句的最后一个子句，ORDER BY不仅可以根据单列，多列排序，还可以通过关键字DESC(DESCENDING)，ASC(ASCENDING，升序是默认的排序方式，可以不指定)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 根据单列排序</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 根据多列排序(会现根据第一列排好序，在保证第一列有序(有相同值，如下面例子中的prod_price价格相等时）的情况下对指定的第2列进行排序，后面指定的字段依照此规则)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price, prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 检索结果按照prod_price, prod_name降序排列</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_id, prod_price, prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> prod_price <span class=\"keyword\">DESC</span> , prod_name <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>\n<p>tips：<br>并非一定只能指定检索的字段，还可以制定排序的字段是表中存在的其他字段。<br>DESC关键字仅对修饰的一个字段起作用，要多个降序排列，请指定多个DESC字段。</p>\n<h5 id=\"ch4\">过滤数据</h5>\n\n<p><strong>WHERE关键字：</strong><br>数据库表中通常情况下保存了大量的数据，一般业务情况下我们不可能需要全部的数据，我们需要指定一些条件对查询的结果集做限定，这些条件我们称为搜索条件，也叫过滤条件。</p>\n<ol>\n<li>where支持的比较操作符</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>说明</th>\n<th>操作符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>等于</td>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&lt;&gt;</td>\n<td>不等于</td>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n<td>!&gt;</td>\n<td>不大于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n<td>BETWEEN</td>\n<td>在两个值之间</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n<td>IS NULL</td>\n<td>为 NULL值</td>\n</tr>\n<tr>\n<td>!&lt;</td>\n<td>不小于</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 等于操作</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> prod_price= <span class=\"number\">3.49</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 不等于操作</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> vend_id, prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> vend_id != <span class=\"string\">'DLL01'</span>;</span><br><span class=\"line\"><span class=\"comment\">-- BETWEEN操作</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name , prod_price <span class=\"keyword\">FROM</span> Products WHRER prod_price <span class=\"keyword\">BETWEEN</span> <span class=\"number\">5</span> <span class=\"keyword\">AND</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">-- IS NULL判断</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> prod_prices <span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>高级数据过滤</li>\n</ol>\n<p><strong>AND, OR 组合查询条件</strong></p>\n<p>可以使用 AND 和 OR 组合查询条件，但是要注意，在进行复杂组合使用时我们最好能对条件进行分组，不要依赖默认求值顺序。AND的优先级高于OR。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 注意组合AND和OR操作符时，最好组合括号使用，不要依赖默认求值逻辑(下面这个例子，如果去掉括号，会先进行AND运算求值，再将条件作为OR运算的条件)</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> (vend_id = <span class=\"string\">'DLL01'</span> <span class=\"keyword\">OR</span> vend_id=<span class=\"string\">'BRS01'</span>) <span class=\"keyword\">AND</span> prod_price &gt;=<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>IN, NOT关键字</strong></p>\n<p>IN操作符用来指定一个条件集合，字段只需满足条件集合中任一条件即可。</p>\n<p>NOT操作符用来否定其后跟随的任何查询条件，因此NOT不单独使用，需要与其他操作符一起使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查找vend_id字段等于'DLL01'或者是'BRS01'的商品</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> vend_id <span class=\"keyword\">IN</span> ( <span class=\"string\">'DLL01'</span>, <span class=\"string\">'BRS01'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查找 vend_id字段不等于'DLL01'的商品</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name,prod_price <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> <span class=\"keyword\">NOT</span> vend_id = <span class=\"string\">'DLL01'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 结合IN使用</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> prod_name, prod_price <span class=\"keyword\">FROM</span> Products <span class=\"keyword\">WHERE</span> vend_id <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> ( <span class=\"string\">'DLL01'</span>, <span class=\"string\">'BRS01'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>通配符过滤</strong></p>\n<p>我们有时候并不能确定自己想要的数据在</p>\n<h5 id=\"ch\"></h5>\n\n\n\n\n"},{"title":"Spring学习笔记","date":"2017-04-27T14:34:46.000Z","_content":"\n\n##### 参阅\n\n[git-book](https://www.gitbook.com/book/waylau/spring-framework-4-reference/details)\n[author-csdn](http://blog.csdn.net/isea533/article/details/50450289)\n[spring-frame references zh](http://spring.cndocs.tk/mvc.html#mvc-introduction)\n","source":"_posts/Spring学习笔记.md","raw":"---\ntitle: Spring学习笔记\ndate: 2017-04-27 22:34:46\ntags: spring\ncategories: spring-framework\n---\n\n\n##### 参阅\n\n[git-book](https://www.gitbook.com/book/waylau/spring-framework-4-reference/details)\n[author-csdn](http://blog.csdn.net/isea533/article/details/50450289)\n[spring-frame references zh](http://spring.cndocs.tk/mvc.html#mvc-introduction)\n","slug":"Spring学习笔记","published":1,"updated":"2018-07-19T03:43:58.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjxxlrpq0001b4htpk8nbz4w","content":"<h5 id=\"参阅\"><a href=\"#参阅\" class=\"headerlink\" title=\"参阅\"></a>参阅</h5><p><a href=\"https://www.gitbook.com/book/waylau/spring-framework-4-reference/details\" target=\"_blank\" rel=\"noopener\">git-book</a><br><a href=\"http://blog.csdn.net/isea533/article/details/50450289\" target=\"_blank\" rel=\"noopener\">author-csdn</a><br><a href=\"http://spring.cndocs.tk/mvc.html#mvc-introduction\" target=\"_blank\" rel=\"noopener\">spring-frame references zh</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"参阅\"><a href=\"#参阅\" class=\"headerlink\" title=\"参阅\"></a>参阅</h5><p><a href=\"https://www.gitbook.com/book/waylau/spring-framework-4-reference/details\" target=\"_blank\" rel=\"noopener\">git-book</a><br><a href=\"http://blog.csdn.net/isea533/article/details/50450289\" target=\"_blank\" rel=\"noopener\">author-csdn</a><br><a href=\"http://spring.cndocs.tk/mvc.html#mvc-introduction\" target=\"_blank\" rel=\"noopener\">spring-frame references zh</a></p>\n"},{"title":"java 笔面题总结","date":"2017-04-19T16:03:34.000Z","_content":"\n### 笔面题总结\n\n**目录：**\n\n- [Java相关](#java)\n- [Web开发相关](#web)\n- [数据库相关](#database)\n- [框架相关](#framework)\n- [设计模式相关](#design_pattern)\n\n<h4 id='java'>Java相关</h4>\n\n- based knowledge\n\nswitch能用于那些基本数据类型？\nswitch能用于的基本类型有 byte, char, short, int\nswitch能用于的引用类型：Byte，Character，Short，Integer（上面4种基本类型的包装类），String（jdk版本>=1.7)，enum\n\nswitch为什么不能作用于long(长整型）?\nswitch 语句被设计成跳转表，表面上看支持很多类型，但实际上只有一种，那就是 int 型，小于 int 的类型都会自动提升成 int。编译时，switch (abc) 语句被当成 goto addrs[abc]，而这一句被实现成机器指令时就成为 表首地址 + 偏移量，所以一个 abc 其实代表了一个偏移地址。至于为什么不能使用long，可能是在Java语言中设计switch语句考虑平台的兼容问题，很多机器还是32位机器。\n\n- String\n\nString 是基本数据类型吗？\n不是，java中的基本数据类型有8种，分别是byte, char, short, int, long, float, double, boolean\n\n- IO\n\n- Exception\n\n谈谈Java中异常的原理和应用\n异常是指Java在运行时出现的非正常情况，Java也使用面向对象的思想来处理这些情况，将一些异常信息封装在类中来表示，Java中的异常分为两类Exception和Error，这两个都是Throwable的子类，Error是指程序中出现一些奔溃，程序不能继续运行的错误。\n\n\n<h4 id='web'>Web开发相关</h4>\n\n- based knowledge\n\n请简述Session 和 Cookie 的区别\n\n<h4 id='database'>数据库相关</h4>\n\n查询记录使其没有重复的值\n\n查分低于60分为不及格，大于60分为及格，大于80分为优秀\n\n新建表A，复制表B中内容至表A，保证表结构一致\n\n查询部门工资最高的前3人\n\n查询部门工资高于平均工资的人\n\n<h4 id='framework'>框架相关</h4>\n\n<h4 id ='design_pattern'>设计模式相关</h4>\n\n- 单例模式\n\n请写一个你认为好的单例模式\n考虑到单例模式需要防范下面几点：\n(1) 多线程安全\n(2) 反序列化\n(3) 反射攻击\n先说说可以保证多线程安全的方法\n使用静态变量初始化单例\n\n```java\nclass SingletonByStatic{\n    private static SingletonByStatic instance = new SingletonByStatic();\n    \n    private SingletonByStatic(){\n        \n    }\n    \n    public static SingletonByStatic getInstance(){\n        return instance;\n    }\n}\n```\n\n静态内部类(可以实现懒加载，在使用时才会初始化，而不是当类被加载时instance就被初始化呢。\n\n```java\nclass SingletonByStaticNestedClass{\n    private SingletonByStaticNestedClass(){\n\n    }\n\n    private static class SingletonHolder{\n        private static SingletonByStaticNestedClass instance = new SingletonByStaticNestedClass();\n    }\n\n    public static SingletonByStaticNestedClass getInstance(){\n        return SingletonHolder.instance;\n    }\n}\n```\n\n使用枚举（推荐，代码简单，并且保证了反序列化不唯一或者反射攻击)\n\n```java\nenum SingletonByEnum{\n\n    INSTANCE{\n        @Override\n        public void infos(){\n            System.out.print(\"i am a singleton\");\n        }\n    };\n\n    protected abstract void infos();\n}\n```\n\n\n  ","source":"_posts/java-笔面题总结.md","raw":"---\ntitle: java 笔面题总结\ndate: 2017-04-20 00:03:34\ntags:\n  - database\n  - web\n  - java\ncategories: java\n---\n\n### 笔面题总结\n\n**目录：**\n\n- [Java相关](#java)\n- [Web开发相关](#web)\n- [数据库相关](#database)\n- [框架相关](#framework)\n- [设计模式相关](#design_pattern)\n\n<h4 id='java'>Java相关</h4>\n\n- based knowledge\n\nswitch能用于那些基本数据类型？\nswitch能用于的基本类型有 byte, char, short, int\nswitch能用于的引用类型：Byte，Character，Short，Integer（上面4种基本类型的包装类），String（jdk版本>=1.7)，enum\n\nswitch为什么不能作用于long(长整型）?\nswitch 语句被设计成跳转表，表面上看支持很多类型，但实际上只有一种，那就是 int 型，小于 int 的类型都会自动提升成 int。编译时，switch (abc) 语句被当成 goto addrs[abc]，而这一句被实现成机器指令时就成为 表首地址 + 偏移量，所以一个 abc 其实代表了一个偏移地址。至于为什么不能使用long，可能是在Java语言中设计switch语句考虑平台的兼容问题，很多机器还是32位机器。\n\n- String\n\nString 是基本数据类型吗？\n不是，java中的基本数据类型有8种，分别是byte, char, short, int, long, float, double, boolean\n\n- IO\n\n- Exception\n\n谈谈Java中异常的原理和应用\n异常是指Java在运行时出现的非正常情况，Java也使用面向对象的思想来处理这些情况，将一些异常信息封装在类中来表示，Java中的异常分为两类Exception和Error，这两个都是Throwable的子类，Error是指程序中出现一些奔溃，程序不能继续运行的错误。\n\n\n<h4 id='web'>Web开发相关</h4>\n\n- based knowledge\n\n请简述Session 和 Cookie 的区别\n\n<h4 id='database'>数据库相关</h4>\n\n查询记录使其没有重复的值\n\n查分低于60分为不及格，大于60分为及格，大于80分为优秀\n\n新建表A，复制表B中内容至表A，保证表结构一致\n\n查询部门工资最高的前3人\n\n查询部门工资高于平均工资的人\n\n<h4 id='framework'>框架相关</h4>\n\n<h4 id ='design_pattern'>设计模式相关</h4>\n\n- 单例模式\n\n请写一个你认为好的单例模式\n考虑到单例模式需要防范下面几点：\n(1) 多线程安全\n(2) 反序列化\n(3) 反射攻击\n先说说可以保证多线程安全的方法\n使用静态变量初始化单例\n\n```java\nclass SingletonByStatic{\n    private static SingletonByStatic instance = new SingletonByStatic();\n    \n    private SingletonByStatic(){\n        \n    }\n    \n    public static SingletonByStatic getInstance(){\n        return instance;\n    }\n}\n```\n\n静态内部类(可以实现懒加载，在使用时才会初始化，而不是当类被加载时instance就被初始化呢。\n\n```java\nclass SingletonByStaticNestedClass{\n    private SingletonByStaticNestedClass(){\n\n    }\n\n    private static class SingletonHolder{\n        private static SingletonByStaticNestedClass instance = new SingletonByStaticNestedClass();\n    }\n\n    public static SingletonByStaticNestedClass getInstance(){\n        return SingletonHolder.instance;\n    }\n}\n```\n\n使用枚举（推荐，代码简单，并且保证了反序列化不唯一或者反射攻击)\n\n```java\nenum SingletonByEnum{\n\n    INSTANCE{\n        @Override\n        public void infos(){\n            System.out.print(\"i am a singleton\");\n        }\n    };\n\n    protected abstract void infos();\n}\n```\n\n\n  ","slug":"java-笔面题总结","published":1,"updated":"2018-07-19T03:43:58.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjxxlrpv0004b4hte0hbvis5","content":"<h3 id=\"笔面题总结\"><a href=\"#笔面题总结\" class=\"headerlink\" title=\"笔面题总结\"></a>笔面题总结</h3><p><strong>目录：</strong></p>\n<ul>\n<li><a href=\"#java\">Java相关</a></li>\n<li><a href=\"#web\">Web开发相关</a></li>\n<li><a href=\"#database\">数据库相关</a></li>\n<li><a href=\"#framework\">框架相关</a></li>\n<li><a href=\"#design_pattern\">设计模式相关</a></li>\n</ul>\n<h4 id=\"java\">Java相关</h4>\n\n<ul>\n<li>based knowledge</li>\n</ul>\n<p>switch能用于那些基本数据类型？<br>switch能用于的基本类型有 byte, char, short, int<br>switch能用于的引用类型：Byte，Character，Short，Integer（上面4种基本类型的包装类），String（jdk版本&gt;=1.7)，enum</p>\n<p>switch为什么不能作用于long(长整型）?<br>switch 语句被设计成跳转表，表面上看支持很多类型，但实际上只有一种，那就是 int 型，小于 int 的类型都会自动提升成 int。编译时，switch (abc) 语句被当成 goto addrs[abc]，而这一句被实现成机器指令时就成为 表首地址 + 偏移量，所以一个 abc 其实代表了一个偏移地址。至于为什么不能使用long，可能是在Java语言中设计switch语句考虑平台的兼容问题，很多机器还是32位机器。</p>\n<ul>\n<li>String</li>\n</ul>\n<p>String 是基本数据类型吗？<br>不是，java中的基本数据类型有8种，分别是byte, char, short, int, long, float, double, boolean</p>\n<ul>\n<li><p>IO</p>\n</li>\n<li><p>Exception</p>\n</li>\n</ul>\n<p>谈谈Java中异常的原理和应用<br>异常是指Java在运行时出现的非正常情况，Java也使用面向对象的思想来处理这些情况，将一些异常信息封装在类中来表示，Java中的异常分为两类Exception和Error，这两个都是Throwable的子类，Error是指程序中出现一些奔溃，程序不能继续运行的错误。</p>\n<h4 id=\"web\">Web开发相关</h4>\n\n<ul>\n<li>based knowledge</li>\n</ul>\n<p>请简述Session 和 Cookie 的区别</p>\n<h4 id=\"database\">数据库相关</h4>\n\n<p>查询记录使其没有重复的值</p>\n<p>查分低于60分为不及格，大于60分为及格，大于80分为优秀</p>\n<p>新建表A，复制表B中内容至表A，保证表结构一致</p>\n<p>查询部门工资最高的前3人</p>\n<p>查询部门工资高于平均工资的人</p>\n<h4 id=\"framework\">框架相关</h4>\n\n<h4 id=\"design_pattern\">设计模式相关</h4>\n\n<ul>\n<li>单例模式</li>\n</ul>\n<p>请写一个你认为好的单例模式<br>考虑到单例模式需要防范下面几点：<br>(1) 多线程安全<br>(2) 反序列化<br>(3) 反射攻击<br>先说说可以保证多线程安全的方法<br>使用静态变量初始化单例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonByStatic</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonByStatic instance = <span class=\"keyword\">new</span> SingletonByStatic();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonByStatic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonByStatic <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>静态内部类(可以实现懒加载，在使用时才会初始化，而不是当类被加载时instance就被初始化呢。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonByStaticNestedClass</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonByStaticNestedClass</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonByStaticNestedClass instance = <span class=\"keyword\">new</span> SingletonByStaticNestedClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonByStaticNestedClass <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用枚举（推荐，代码简单，并且保证了反序列化不唯一或者反射攻击)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> SingletonByEnum&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    INSTANCE&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infos</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"i am a singleton\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">infos</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"笔面题总结\"><a href=\"#笔面题总结\" class=\"headerlink\" title=\"笔面题总结\"></a>笔面题总结</h3><p><strong>目录：</strong></p>\n<ul>\n<li><a href=\"#java\">Java相关</a></li>\n<li><a href=\"#web\">Web开发相关</a></li>\n<li><a href=\"#database\">数据库相关</a></li>\n<li><a href=\"#framework\">框架相关</a></li>\n<li><a href=\"#design_pattern\">设计模式相关</a></li>\n</ul>\n<h4 id=\"java\">Java相关</h4>\n\n<ul>\n<li>based knowledge</li>\n</ul>\n<p>switch能用于那些基本数据类型？<br>switch能用于的基本类型有 byte, char, short, int<br>switch能用于的引用类型：Byte，Character，Short，Integer（上面4种基本类型的包装类），String（jdk版本&gt;=1.7)，enum</p>\n<p>switch为什么不能作用于long(长整型）?<br>switch 语句被设计成跳转表，表面上看支持很多类型，但实际上只有一种，那就是 int 型，小于 int 的类型都会自动提升成 int。编译时，switch (abc) 语句被当成 goto addrs[abc]，而这一句被实现成机器指令时就成为 表首地址 + 偏移量，所以一个 abc 其实代表了一个偏移地址。至于为什么不能使用long，可能是在Java语言中设计switch语句考虑平台的兼容问题，很多机器还是32位机器。</p>\n<ul>\n<li>String</li>\n</ul>\n<p>String 是基本数据类型吗？<br>不是，java中的基本数据类型有8种，分别是byte, char, short, int, long, float, double, boolean</p>\n<ul>\n<li><p>IO</p>\n</li>\n<li><p>Exception</p>\n</li>\n</ul>\n<p>谈谈Java中异常的原理和应用<br>异常是指Java在运行时出现的非正常情况，Java也使用面向对象的思想来处理这些情况，将一些异常信息封装在类中来表示，Java中的异常分为两类Exception和Error，这两个都是Throwable的子类，Error是指程序中出现一些奔溃，程序不能继续运行的错误。</p>\n<h4 id=\"web\">Web开发相关</h4>\n\n<ul>\n<li>based knowledge</li>\n</ul>\n<p>请简述Session 和 Cookie 的区别</p>\n<h4 id=\"database\">数据库相关</h4>\n\n<p>查询记录使其没有重复的值</p>\n<p>查分低于60分为不及格，大于60分为及格，大于80分为优秀</p>\n<p>新建表A，复制表B中内容至表A，保证表结构一致</p>\n<p>查询部门工资最高的前3人</p>\n<p>查询部门工资高于平均工资的人</p>\n<h4 id=\"framework\">框架相关</h4>\n\n<h4 id=\"design_pattern\">设计模式相关</h4>\n\n<ul>\n<li>单例模式</li>\n</ul>\n<p>请写一个你认为好的单例模式<br>考虑到单例模式需要防范下面几点：<br>(1) 多线程安全<br>(2) 反序列化<br>(3) 反射攻击<br>先说说可以保证多线程安全的方法<br>使用静态变量初始化单例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonByStatic</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonByStatic instance = <span class=\"keyword\">new</span> SingletonByStatic();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonByStatic</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonByStatic <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>静态内部类(可以实现懒加载，在使用时才会初始化，而不是当类被加载时instance就被初始化呢。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonByStaticNestedClass</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonByStaticNestedClass</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonByStaticNestedClass instance = <span class=\"keyword\">new</span> SingletonByStaticNestedClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonByStaticNestedClass <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用枚举（推荐，代码简单，并且保证了反序列化不唯一或者反射攻击)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> SingletonByEnum&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    INSTANCE&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infos</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"i am a singleton\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">infos</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"初识echarts","date":"2017-05-21T00:51:38.000Z","_content":"\n","source":"_posts/初识echarts.md","raw":"---\ntitle: 初识echarts\ndate: 2017-05-21 08:51:38\ntags: \n- echarts\ncategories: tool\n---\n\n","slug":"初识echarts","published":1,"updated":"2018-07-19T03:43:58.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjxxlrpw0005b4ht92jn18af","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"了解Map容器","date":"2017-04-19T07:31:36.000Z","_content":"\n#### 一起看看Map容器吧\n\n之前学习Java容器类时做的笔记, 做为从wiznote中转移的第一篇文章, 主要是探讨了一下map容器, 我们如何去写一个hashmap? Java自带的hashmap底层实现是怎么样的呢? 带着这些问题,看看我们下面的内容吧!\n\n- [写一个自己的简单map](#my_map)\n- [关于散列和散列码](#about_hash)\n- [更进一步,如何写个HashMap容器](#my_hash_map)\n\n<h5 id = my_map>写一个自己的简单map</h5>\n\n我们来深入看看Map容器，他是如何工作的，有哪些类型的Map容器，我们如何选择自己需要的Map容器。\n通常map容器也被叫做映射表，或者是关联数组，因为他是用来存储一组相关联的数据，即一组键值对，在标准的java容器类中包含下面几种类型的MAP实现:\n\n - HashMap\n - TreeMap\n - LinkedHashMap\n - WeakHashMap\n - ConcurrentHashMap\n \n 它们根据一些实际需求，在查找，键值对的保存顺序，是否支持并发而有一些不同的实现。我们今天不对他们的全部进行探讨,选取其中用的较多的hashmap来看一下吧。\n \n **step 1**\n首先我们实现一个最简单的Map容器，他的底层是个数组，不支持扩展大小，查询效率也非常低，并且他不能对键值的唯一性保证。如下：\n\n```Java\npublic class MappingTable<K,V>{\n\tprivate Object[][] pairs;\n\tint index;\n\tpublic MappingTable(int length){\n\t\tpairs = new Object[length][2];\n\t}\n\tpublic void put(K key,V value){\n\t\tfor(int i=0;i<index;i++){\n\t\t\tif(key.equals(pairs[i][0])){\n\t\t\t\tpairs[i]=new Object[]{key,value};\n\t\t\t\treturn ;\n\t\t\t}\n\t\t}\n\t\tif(index>=pairs.length){\n\t\t\tthrow new ArrayIndexOutOfBoundsException();\n\t\t}\n\t\tpairs[index++] = new Object[]{key,value};\n\t}\n\t@SuppressWarnings(\"unchecked\")\n\tpublic V get(K key){\n\t\tfor(int i=0;i<pairs.length;i++){\n\t\t\tif(key.equals(pairs[i][0])){\n\t\t\t\treturn (V)pairs[i][1];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\tpublic String toString(){\n\t\tStringBuilder builder = new StringBuilder();\n\t\tfor(int i=0;i<index;i++){\n\t\t\tbuilder.append(pairs[i][0].toString());\n\t\t\tbuilder.append(\" : \");\n\t\t\tbuilder.append(pairs[i][1].toString());\n\t\t\tif(index>i)\n\t\t\t\tbuilder.append(\"\\n\");\n\t\t}\n\t\treturn builder.toString();\n\t}\n\tpublic static void main(String[] args){\n\t\tMappingTable<String,String> map = new MappingTable<String,String>(5);\n\t\tmap.put(\"kaka\",\"15\");\n\t\tmap.put(\"lisa\",\"20\");\n\t\tmap.put(\"yita\",\"18\");\n\t\tSystem.out.println(map);\n\t\tSystem.out.println(map.get(\"lisa\"));\n\t}\n}\n```\n\n这个map实现的比较简单，可以看到上面我们自己实现的容器，无论是存放，还是取值，都要进行一次线性的查找，如果是几十个数据量还好，但是如果一个Map集合中想要存放成千上万个元素呢？难道我们每次都要从头到尾遍历一遍？这效率想想就低的可怕哈，有没有一种可以直接访问的方法，所以java类库的Map实现就引入了HashCode（散列码）的方式来取代对键值的缓慢的线性查找。在根类Object中，有一个hashCode()方法，他是一个native方法，默认是根据对象的某些信息转换得到的，理论上是相对唯一的，所有java对象都可以生成自己的散列码，而HashMap就是通过对象的散列码进行快速查询的。下面我们继续看看散列是啥。\n\n<h5 id = 'about_hash'>散列和散列码</h5>\n\n在看散列前，我们先看一个关于Hashmap的例子。测试Java中的hashmap到底是依靠什么进行工作的，是通过equals()方法保证键值的唯一吗？我们自己编写的类，不覆写hashcode()方法，存放在hash类型的集合中，能保证唯一吗？来看看吧！\n\n先来看一个例子，如果我们编写自己的类作为HashMap的键，不覆写他的hashCode(）方法，看看HashMap能否正常工作。\n> 射击运动员（键） --- Shooter\n他的射击靶数（值）--- TargetNum\n\nShooter类：\n\n```java\npackage ch17.deepincontainers;\npublic class Shooter {\n\tprivate int id;\n\tpublic Shooter(int id){\n\t\tthis.id = id;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\t// TODO Auto-generated method stub\n\t\treturn \"Shooter#\"+id;\n\t}\n}\n```\n\nTargetNum类：\n\n```java\npackage ch17.deepincontainers;\nimport java.util.Random;\npublic class TargetNum {\n\tprivate Random rand = new Random();\n\tString targetNum = String.format(\"TargetNum is %.2f\", rand.nextDouble()*10);\n\t@Override\n\tpublic String toString() {\n\t\t// TODO Auto-generated method stub\n\t\treturn targetNum;\n\t}\n}\n```\n\nTestHashMap类：\n\n```java\npackage ch17.deepincontainers;\nimport java.lang.reflect.Constructor;\nimport java.util.*;\nimport java.util.Map.Entry;\npublic class TestHashMap {\n\tpublic static void main(String[] args)throws Exception {\n\t\t// TODO Auto-generated method stub\n\t\ttestHashMap(Shooter.class);\n\t}\n\tpublic static<T extends Shooter> void testHashMap(Class<T> type) throws Exception{\n\t\tMap<Shooter,TargetNum> map = new HashMap<Shooter,TargetNum>();\n\t\tConstructor<T> cons = type.getConstructor(int.class);\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tmap.put(cons.newInstance(i), new TargetNum());\n\t\t}\n\t\tfor(Entry e:map.entrySet()){\n\t\t\tSystem.out.println(e+\" hashcode: \"+e.getKey().hashCode());\n\t\t}\n\t\tSystem.out.println(\"-------after put------\");\n\t\tmap.put(cons.newInstance(3),new TargetNum());\n\t\tfor(Entry e:map.entrySet()){\n\t\t\tSystem.out.println(e+\" hashcode: \"+e.getKey().hashCode());\n\t\t}\n\t\tSystem.out.println(\"-----can i get by my key-----\");\n\t\tSystem.out.println(map.get(cons.newInstance(3)));\n\t}\n}\n```\n\n看看下面的输出结果：\n\n```\nShooter#8=TargetNum is 0.04 hashcode: 621009875\nShooter#1=TargetNum is 8.33 hashcode: 1735600054\nShooter#4=TargetNum is 3.46 hashcode: 1836019240\nShooter#6=TargetNum is 7.27 hashcode: 1173230247\nShooter#9=TargetNum is 1.71 hashcode: 1265094477\n* Shooter#3=TargetNum is 8.01 hashcode: 2133927002 \nShooter#5=TargetNum is 7.66 hashcode: 325040804\nShooter#0=TargetNum is 4.58 hashcode: 356573597\nShooter#2=TargetNum is 7.02 hashcode: 21685669\nShooter#7=TargetNum is 1.47 hashcode: 856419764\n-------after put------\nShooter#8=TargetNum is 0.04 hashcode: 621009875\nShooter#1=TargetNum is 8.33 hashcode: 1735600054\n* Shooter#3=TargetNum is 2.07 hashcode: 2125039532\nShooter#4=TargetNum is 3.46 hashcode: 1836019240\nShooter#6=TargetNum is 7.27 hashcode: 1173230247\nShooter#9=TargetNum is 1.71 hashcode: 1265094477\n* Shooter#3=TargetNum is 8.01 hashcode: 2133927002\nShooter#5=TargetNum is 7.66 hashcode: 325040804\nShooter#0=TargetNum is 4.58 hashcode: 356573597\nShooter#2=TargetNum is 7.02 hashcode: 21685669\nShooter#7=TargetNum is 1.47 hashcode: 856419764\n-----can i get by my key-----\nnull\n```\n\n结果显然是不能正常工作，不仅相同的键值被重复添加在map中呢，并且不能正常取值。在看hashmap的源码前，我们在进行下其他的猜想，其一，是不是没有覆写对象的equals方法导致添加了重复的键值，其二，没有覆写对象的hashcode方法导致我们无法取值，既然如此，我们在写两个类测试下。\n\nclass ShooterJustOverEquals:\n\n```java\npublic class ShooterJustOverEquals extends Shooter {\n\t\n\tpublic ShooterJustOverEquals(int id){\n\t\tsuper(id);\n\t}\n\t\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\treturn obj instanceof ShooterJustOverEquals &&\n\t\t\t\tthis.getId() == ((ShooterJustOverEquals) obj).getId();\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\t// TODO Auto-generated method stub\n\t\treturn \"ShooterJustOverEquals:\"+getId();\n\t}\n\tpublic static void main(String[] args) throws Exception{\n\t\tTestHashMap.testHashMap(ShooterJustOverEquals.class);\n\t}\n}\n```\n\n结果如下\n\n```\nShooterJustOverEquals:8=TargetNum is 3.04 hashcode: 621009875\nShooterJustOverEquals:1=TargetNum is 4.70 hashcode: 1735600054\nShooterJustOverEquals:4=TargetNum is 7.44 hashcode: 1836019240\nShooterJustOverEquals:6=TargetNum is 2.52 hashcode: 1173230247\nShooterJustOverEquals:9=TargetNum is 6.13 hashcode: 1265094477\n* ShooterJustOverEquals:3=TargetNum is 4.84 hashcode: 2133927002\nShooterJustOverEquals:5=TargetNum is 4.85 hashcode: 325040804\nShooterJustOverEquals:0=TargetNum is 5.97 hashcode: 356573597\nShooterJustOverEquals:2=TargetNum is 8.69 hashcode: 21685669\nShooterJustOverEquals:7=TargetNum is 9.17 hashcode: 856419764\n-------after put------\nShooterJustOverEquals:8=TargetNum is 3.04 hashcode: 621009875\nShooterJustOverEquals:1=TargetNum is 4.70 hashcode: 1735600054\n* ShooterJustOverEquals:3=TargetNum is 3.35 hashcode: 2125039532\nShooterJustOverEquals:4=TargetNum is 7.44 hashcode: 1836019240\nShooterJustOverEquals:6=TargetNum is 2.52 hashcode: 1173230247\nShooterJustOverEquals:9=TargetNum is 6.13 hashcode: 1265094477\n* ShooterJustOverEquals:3=TargetNum is 4.84 hashcode: 2133927002\nShooterJustOverEquals:5=TargetNum is 4.85 hashcode: 325040804\nShooterJustOverEquals:0=TargetNum is 5.97 hashcode: 356573597\nShooterJustOverEquals:2=TargetNum is 8.69 hashcode: 21685669\nShooterJustOverEquals:7=TargetNum is 9.17 hashcode: 856419764\n-----can i get by my key-----\nnull\n```\n\n可以看到，我们覆写了equls方法，但是没有起作用，我可以猜测是不是要结合hashcode方法才能生效呢？我们接下来继续试一把\n\nShooterOverEqualsAndHashcode:\n\n```java\npublic class ShooterOverEqAndHashcode extends ShooterJustOverEquals {\n\tpublic ShooterOverEqAndHashcode(int id) {\n\t\tsuper(id);\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t\n\t@Override\n\tpublic int hashCode() {\n\t\treturn getId();\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\t// TODO Auto-generated method stub\n\t\treturn \"ShooterOverEqAndHashcode#\"+getId();\n\t}\n\tpublic static void main(String[] args) throws Exception {\n\t\tTestHashMap.testHashMap(ShooterOverEqAndHashcode.class);\n\t}\n}\n```\n\n结果：\n\n```\nShooterOverEqAndHashcode#0=TargetNum is 6.34 hashcode: 0\nShooterOverEqAndHashcode#1=TargetNum is 1.33 hashcode: 1\nShooterOverEqAndHashcode#2=TargetNum is 1.13 hashcode: 2\nShooterOverEqAndHashcode#3=TargetNum is 6.43 hashcode: 3\nShooterOverEqAndHashcode#4=TargetNum is 4.49 hashcode: 4\nShooterOverEqAndHashcode#5=TargetNum is 9.18 hashcode: 5\nShooterOverEqAndHashcode#6=TargetNum is 0.67 hashcode: 6\nShooterOverEqAndHashcode#7=TargetNum is 2.66 hashcode: 7\nShooterOverEqAndHashcode#8=TargetNum is 8.27 hashcode: 8\nShooterOverEqAndHashcode#9=TargetNum is 4.49 hashcode: 9\n-------after put------\nShooterOverEqAndHashcode#0=TargetNum is 6.34 hashcode: 0\nShooterOverEqAndHashcode#1=TargetNum is 1.33 hashcode: 1\nShooterOverEqAndHashcode#2=TargetNum is 1.13 hashcode: 2\nShooterOverEqAndHashcode#3=TargetNum is 2.92 hashcode: 3\nShooterOverEqAndHashcode#4=TargetNum is 4.49 hashcode: 4\nShooterOverEqAndHashcode#5=TargetNum is 9.18 hashcode: 5\nShooterOverEqAndHashcode#6=TargetNum is 0.67 hashcode: 6\nShooterOverEqAndHashcode#7=TargetNum is 2.66 hashcode: 7\nShooterOverEqAndHashcode#8=TargetNum is 8.27 hashcode: 8\nShooterOverEqAndHashcode#9=TargetNum is 4.49 hashcode: 9\n-----can i get by my key-----\nTargetNum is 2.92\n```\n\n这回我们看到，HashMap正常在工作呢，我们调转到hashmap的源码中去看看两个关键位置的操作\n1. put({key : value})\n2. get(key)\n\n发现Hashmap的底层实现是这样的，我们用一张图来说明：\n\n{% asset_img how_to_hash.png how_to_hash %}  \n\n\n<h5 id = 'my_hash_map'>更进一步,如何写个HashMap容器</h5>\n\n现在我们知道了散列的原理，那么实现一个简单的HashMap也就没那么困难呢，我们接下来也尝试实现一个简单的SimpleHashMap，在此之前，先和大家来看看一个标准的map容器是一个怎么样的大体结构，我们来仿照这个结构编写我们的hashmap\n\n{% asset_img abstract_map.jpg map_structure %}\n\nAbstractMap<K,V>这个抽象基类，这个基类包含了一个抽象方法public abstract Set<Map.Entry<K,V>> entrySet(),这个entrySet是用来存放键值对的集合的，我们实际的键值存放在Entry<K,V>中。这个Entry由我们自己提供，或者使用系统提供给我们的两个默认实现，SimpleEntry和SimpleImmutableEntry。\n\n那么我们按照这个结构，编写一个自己的hash map容器类：\n\n```Java\npackage ch17.deepincontainers;\nimport java.util.AbstractMap;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.*;\npublic class SimpleHashMap<K,V> extends AbstractMap<K, V> implements Map<K, V> {\n\tprivate final static int SIZE = 97;\n\tprivate LinkedList<Entry<K,V>>[] buckets = new LinkedList[97];\n\t@Override\n\tpublic V get(Object key) {\n\t\tint index = key==null?0:(key.hashCode()%SIZE);\n\t\tif(buckets[index] == null){\n\t\t\treturn null;\n\t\t}\n\t\tV value = null;\n\t\tfor(Entry<K,V> e : buckets[index]){\n\t\t\tif(e.getKey()==null){\n\t\t\t\tvalue = e.getValue();\n\t\t\t}\n\t\t\telse if(e.getKey().equals(key)){\n\t\t\t\tvalue = e.getValue();\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\t@Override\n\tpublic V put(K key, V value) {\n\t\t// TODO Auto-generated method stub\n\t\tV oldValue = get(key);\n\t\tint index = key==null?0:(key.hashCode()%SIZE);\n\t\tif(buckets[index]==null){\n\t\t\tbuckets[index] = new LinkedList<Entry<K,V>>();\n\t\t}\n\t\tif(buckets[index].size()>0){\n\t\t\tfor(Entry<K,V>e:buckets[index]){\n\t\t\t\tif(e.getKey()==null){\n\t\t\t\t\tbuckets[index].remove(e);\n\t\t\t\t\tbuckets[index].add(new SimpleEntry(key, value));\n\t\t\t\t}else if(e.getKey().equals(key)){\n\t\t\t\t\tbuckets[index].remove(e);\n\t\t\t\t\tbuckets[index].add(new SimpleEntry(key, value));\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\tbuckets[index].add(new SimpleEntry<K,V>(key,value)); \n\t\t}\n\t\treturn oldValue;\t\n\t}\n\t@Override\n\tpublic V remove(Object key) {\n\t\tint index = key==null ? 0 : (key.hashCode()%SIZE);\n\t\tif(buckets[index]==null){\n\t\t\treturn null;\n\t\t}\n\t\tV value = null;\n\t\tfor(Entry<K,V> e : buckets[index]){\n\t\t\tif(e.getKey()==null){\n\t\t\t\tvalue = e.getValue();\n\t\t\t\tbuckets[index].remove(e);\n\t\t\t}else if(e.getKey().equals(key)){\n\t\t\t\tvalue = e.getValue();\n\t\t\t\tbuckets[index].remove(e);\n\t\t\t}\n\t\t}\n\t\treturn value ;\n\t}\n\t@Override\n\tpublic Set<java.util.Map.Entry<K, V>> entrySet() {\n\t\tSet<Entry<K,V>> set =new HashSet<Entry<K,V>>();\n\t\tfor(List<Entry<K,V>> list:buckets){\n\t\t\tif(list==null){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tset.addAll(list);\n\t\t\t}\n\t\t}\n\t\treturn set;\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tSimpleHashMap<String,Integer> map = new SimpleHashMap<String,Integer>();\n\t\tmap.put(null, 1);\n\t\tmap.put(null, 2);\n\t\tmap.put(\"llcat\", 25);\n\t\tSystem.out.println(map.get(null));\n\t\tSystem.out.println(map.get(\"llcat\"));\n\t\tfor(Entry<String,Integer> e:map.entrySet())\n\t\t\tSystem.out.println(e.getKey());\n\t\tmap.remove(null);\n\t\tSystem.out.println(map.get(null));\n\t\tmap.remove(\"llcat\");\n\t\tSystem.out.println(map.get(\"llcat\"));\n\t}\n}\n```\n\n我们只覆写了几个常用的方法，其目的是理解散列到底是如何工作的。到此为止，我们应该对Map容器有了进一步的了解，希望大家可以去看看HashMap的源码实现。接下来我们看看如何给自己的类覆写一个好的hashCode()方法，比如像我们上面那样为shoooter类覆写的hashcode不是理想的实现，不好的hash值可能会导致将所有的键值对散列到了集中的几个桶位，这样导致散列的不够平均，查询速度也会慢上很多。\n\n","source":"_posts/了解Map容器.md","raw":"---\ntitle: 了解Map容器\ndate: 2017-04-19 15:31:36\ntags:\n  - java\n  - collections\ncategories: java\n---\n\n#### 一起看看Map容器吧\n\n之前学习Java容器类时做的笔记, 做为从wiznote中转移的第一篇文章, 主要是探讨了一下map容器, 我们如何去写一个hashmap? Java自带的hashmap底层实现是怎么样的呢? 带着这些问题,看看我们下面的内容吧!\n\n- [写一个自己的简单map](#my_map)\n- [关于散列和散列码](#about_hash)\n- [更进一步,如何写个HashMap容器](#my_hash_map)\n\n<h5 id = my_map>写一个自己的简单map</h5>\n\n我们来深入看看Map容器，他是如何工作的，有哪些类型的Map容器，我们如何选择自己需要的Map容器。\n通常map容器也被叫做映射表，或者是关联数组，因为他是用来存储一组相关联的数据，即一组键值对，在标准的java容器类中包含下面几种类型的MAP实现:\n\n - HashMap\n - TreeMap\n - LinkedHashMap\n - WeakHashMap\n - ConcurrentHashMap\n \n 它们根据一些实际需求，在查找，键值对的保存顺序，是否支持并发而有一些不同的实现。我们今天不对他们的全部进行探讨,选取其中用的较多的hashmap来看一下吧。\n \n **step 1**\n首先我们实现一个最简单的Map容器，他的底层是个数组，不支持扩展大小，查询效率也非常低，并且他不能对键值的唯一性保证。如下：\n\n```Java\npublic class MappingTable<K,V>{\n\tprivate Object[][] pairs;\n\tint index;\n\tpublic MappingTable(int length){\n\t\tpairs = new Object[length][2];\n\t}\n\tpublic void put(K key,V value){\n\t\tfor(int i=0;i<index;i++){\n\t\t\tif(key.equals(pairs[i][0])){\n\t\t\t\tpairs[i]=new Object[]{key,value};\n\t\t\t\treturn ;\n\t\t\t}\n\t\t}\n\t\tif(index>=pairs.length){\n\t\t\tthrow new ArrayIndexOutOfBoundsException();\n\t\t}\n\t\tpairs[index++] = new Object[]{key,value};\n\t}\n\t@SuppressWarnings(\"unchecked\")\n\tpublic V get(K key){\n\t\tfor(int i=0;i<pairs.length;i++){\n\t\t\tif(key.equals(pairs[i][0])){\n\t\t\t\treturn (V)pairs[i][1];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\tpublic String toString(){\n\t\tStringBuilder builder = new StringBuilder();\n\t\tfor(int i=0;i<index;i++){\n\t\t\tbuilder.append(pairs[i][0].toString());\n\t\t\tbuilder.append(\" : \");\n\t\t\tbuilder.append(pairs[i][1].toString());\n\t\t\tif(index>i)\n\t\t\t\tbuilder.append(\"\\n\");\n\t\t}\n\t\treturn builder.toString();\n\t}\n\tpublic static void main(String[] args){\n\t\tMappingTable<String,String> map = new MappingTable<String,String>(5);\n\t\tmap.put(\"kaka\",\"15\");\n\t\tmap.put(\"lisa\",\"20\");\n\t\tmap.put(\"yita\",\"18\");\n\t\tSystem.out.println(map);\n\t\tSystem.out.println(map.get(\"lisa\"));\n\t}\n}\n```\n\n这个map实现的比较简单，可以看到上面我们自己实现的容器，无论是存放，还是取值，都要进行一次线性的查找，如果是几十个数据量还好，但是如果一个Map集合中想要存放成千上万个元素呢？难道我们每次都要从头到尾遍历一遍？这效率想想就低的可怕哈，有没有一种可以直接访问的方法，所以java类库的Map实现就引入了HashCode（散列码）的方式来取代对键值的缓慢的线性查找。在根类Object中，有一个hashCode()方法，他是一个native方法，默认是根据对象的某些信息转换得到的，理论上是相对唯一的，所有java对象都可以生成自己的散列码，而HashMap就是通过对象的散列码进行快速查询的。下面我们继续看看散列是啥。\n\n<h5 id = 'about_hash'>散列和散列码</h5>\n\n在看散列前，我们先看一个关于Hashmap的例子。测试Java中的hashmap到底是依靠什么进行工作的，是通过equals()方法保证键值的唯一吗？我们自己编写的类，不覆写hashcode()方法，存放在hash类型的集合中，能保证唯一吗？来看看吧！\n\n先来看一个例子，如果我们编写自己的类作为HashMap的键，不覆写他的hashCode(）方法，看看HashMap能否正常工作。\n> 射击运动员（键） --- Shooter\n他的射击靶数（值）--- TargetNum\n\nShooter类：\n\n```java\npackage ch17.deepincontainers;\npublic class Shooter {\n\tprivate int id;\n\tpublic Shooter(int id){\n\t\tthis.id = id;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\t// TODO Auto-generated method stub\n\t\treturn \"Shooter#\"+id;\n\t}\n}\n```\n\nTargetNum类：\n\n```java\npackage ch17.deepincontainers;\nimport java.util.Random;\npublic class TargetNum {\n\tprivate Random rand = new Random();\n\tString targetNum = String.format(\"TargetNum is %.2f\", rand.nextDouble()*10);\n\t@Override\n\tpublic String toString() {\n\t\t// TODO Auto-generated method stub\n\t\treturn targetNum;\n\t}\n}\n```\n\nTestHashMap类：\n\n```java\npackage ch17.deepincontainers;\nimport java.lang.reflect.Constructor;\nimport java.util.*;\nimport java.util.Map.Entry;\npublic class TestHashMap {\n\tpublic static void main(String[] args)throws Exception {\n\t\t// TODO Auto-generated method stub\n\t\ttestHashMap(Shooter.class);\n\t}\n\tpublic static<T extends Shooter> void testHashMap(Class<T> type) throws Exception{\n\t\tMap<Shooter,TargetNum> map = new HashMap<Shooter,TargetNum>();\n\t\tConstructor<T> cons = type.getConstructor(int.class);\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tmap.put(cons.newInstance(i), new TargetNum());\n\t\t}\n\t\tfor(Entry e:map.entrySet()){\n\t\t\tSystem.out.println(e+\" hashcode: \"+e.getKey().hashCode());\n\t\t}\n\t\tSystem.out.println(\"-------after put------\");\n\t\tmap.put(cons.newInstance(3),new TargetNum());\n\t\tfor(Entry e:map.entrySet()){\n\t\t\tSystem.out.println(e+\" hashcode: \"+e.getKey().hashCode());\n\t\t}\n\t\tSystem.out.println(\"-----can i get by my key-----\");\n\t\tSystem.out.println(map.get(cons.newInstance(3)));\n\t}\n}\n```\n\n看看下面的输出结果：\n\n```\nShooter#8=TargetNum is 0.04 hashcode: 621009875\nShooter#1=TargetNum is 8.33 hashcode: 1735600054\nShooter#4=TargetNum is 3.46 hashcode: 1836019240\nShooter#6=TargetNum is 7.27 hashcode: 1173230247\nShooter#9=TargetNum is 1.71 hashcode: 1265094477\n* Shooter#3=TargetNum is 8.01 hashcode: 2133927002 \nShooter#5=TargetNum is 7.66 hashcode: 325040804\nShooter#0=TargetNum is 4.58 hashcode: 356573597\nShooter#2=TargetNum is 7.02 hashcode: 21685669\nShooter#7=TargetNum is 1.47 hashcode: 856419764\n-------after put------\nShooter#8=TargetNum is 0.04 hashcode: 621009875\nShooter#1=TargetNum is 8.33 hashcode: 1735600054\n* Shooter#3=TargetNum is 2.07 hashcode: 2125039532\nShooter#4=TargetNum is 3.46 hashcode: 1836019240\nShooter#6=TargetNum is 7.27 hashcode: 1173230247\nShooter#9=TargetNum is 1.71 hashcode: 1265094477\n* Shooter#3=TargetNum is 8.01 hashcode: 2133927002\nShooter#5=TargetNum is 7.66 hashcode: 325040804\nShooter#0=TargetNum is 4.58 hashcode: 356573597\nShooter#2=TargetNum is 7.02 hashcode: 21685669\nShooter#7=TargetNum is 1.47 hashcode: 856419764\n-----can i get by my key-----\nnull\n```\n\n结果显然是不能正常工作，不仅相同的键值被重复添加在map中呢，并且不能正常取值。在看hashmap的源码前，我们在进行下其他的猜想，其一，是不是没有覆写对象的equals方法导致添加了重复的键值，其二，没有覆写对象的hashcode方法导致我们无法取值，既然如此，我们在写两个类测试下。\n\nclass ShooterJustOverEquals:\n\n```java\npublic class ShooterJustOverEquals extends Shooter {\n\t\n\tpublic ShooterJustOverEquals(int id){\n\t\tsuper(id);\n\t}\n\t\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\treturn obj instanceof ShooterJustOverEquals &&\n\t\t\t\tthis.getId() == ((ShooterJustOverEquals) obj).getId();\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\t// TODO Auto-generated method stub\n\t\treturn \"ShooterJustOverEquals:\"+getId();\n\t}\n\tpublic static void main(String[] args) throws Exception{\n\t\tTestHashMap.testHashMap(ShooterJustOverEquals.class);\n\t}\n}\n```\n\n结果如下\n\n```\nShooterJustOverEquals:8=TargetNum is 3.04 hashcode: 621009875\nShooterJustOverEquals:1=TargetNum is 4.70 hashcode: 1735600054\nShooterJustOverEquals:4=TargetNum is 7.44 hashcode: 1836019240\nShooterJustOverEquals:6=TargetNum is 2.52 hashcode: 1173230247\nShooterJustOverEquals:9=TargetNum is 6.13 hashcode: 1265094477\n* ShooterJustOverEquals:3=TargetNum is 4.84 hashcode: 2133927002\nShooterJustOverEquals:5=TargetNum is 4.85 hashcode: 325040804\nShooterJustOverEquals:0=TargetNum is 5.97 hashcode: 356573597\nShooterJustOverEquals:2=TargetNum is 8.69 hashcode: 21685669\nShooterJustOverEquals:7=TargetNum is 9.17 hashcode: 856419764\n-------after put------\nShooterJustOverEquals:8=TargetNum is 3.04 hashcode: 621009875\nShooterJustOverEquals:1=TargetNum is 4.70 hashcode: 1735600054\n* ShooterJustOverEquals:3=TargetNum is 3.35 hashcode: 2125039532\nShooterJustOverEquals:4=TargetNum is 7.44 hashcode: 1836019240\nShooterJustOverEquals:6=TargetNum is 2.52 hashcode: 1173230247\nShooterJustOverEquals:9=TargetNum is 6.13 hashcode: 1265094477\n* ShooterJustOverEquals:3=TargetNum is 4.84 hashcode: 2133927002\nShooterJustOverEquals:5=TargetNum is 4.85 hashcode: 325040804\nShooterJustOverEquals:0=TargetNum is 5.97 hashcode: 356573597\nShooterJustOverEquals:2=TargetNum is 8.69 hashcode: 21685669\nShooterJustOverEquals:7=TargetNum is 9.17 hashcode: 856419764\n-----can i get by my key-----\nnull\n```\n\n可以看到，我们覆写了equls方法，但是没有起作用，我可以猜测是不是要结合hashcode方法才能生效呢？我们接下来继续试一把\n\nShooterOverEqualsAndHashcode:\n\n```java\npublic class ShooterOverEqAndHashcode extends ShooterJustOverEquals {\n\tpublic ShooterOverEqAndHashcode(int id) {\n\t\tsuper(id);\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t\n\t@Override\n\tpublic int hashCode() {\n\t\treturn getId();\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\t// TODO Auto-generated method stub\n\t\treturn \"ShooterOverEqAndHashcode#\"+getId();\n\t}\n\tpublic static void main(String[] args) throws Exception {\n\t\tTestHashMap.testHashMap(ShooterOverEqAndHashcode.class);\n\t}\n}\n```\n\n结果：\n\n```\nShooterOverEqAndHashcode#0=TargetNum is 6.34 hashcode: 0\nShooterOverEqAndHashcode#1=TargetNum is 1.33 hashcode: 1\nShooterOverEqAndHashcode#2=TargetNum is 1.13 hashcode: 2\nShooterOverEqAndHashcode#3=TargetNum is 6.43 hashcode: 3\nShooterOverEqAndHashcode#4=TargetNum is 4.49 hashcode: 4\nShooterOverEqAndHashcode#5=TargetNum is 9.18 hashcode: 5\nShooterOverEqAndHashcode#6=TargetNum is 0.67 hashcode: 6\nShooterOverEqAndHashcode#7=TargetNum is 2.66 hashcode: 7\nShooterOverEqAndHashcode#8=TargetNum is 8.27 hashcode: 8\nShooterOverEqAndHashcode#9=TargetNum is 4.49 hashcode: 9\n-------after put------\nShooterOverEqAndHashcode#0=TargetNum is 6.34 hashcode: 0\nShooterOverEqAndHashcode#1=TargetNum is 1.33 hashcode: 1\nShooterOverEqAndHashcode#2=TargetNum is 1.13 hashcode: 2\nShooterOverEqAndHashcode#3=TargetNum is 2.92 hashcode: 3\nShooterOverEqAndHashcode#4=TargetNum is 4.49 hashcode: 4\nShooterOverEqAndHashcode#5=TargetNum is 9.18 hashcode: 5\nShooterOverEqAndHashcode#6=TargetNum is 0.67 hashcode: 6\nShooterOverEqAndHashcode#7=TargetNum is 2.66 hashcode: 7\nShooterOverEqAndHashcode#8=TargetNum is 8.27 hashcode: 8\nShooterOverEqAndHashcode#9=TargetNum is 4.49 hashcode: 9\n-----can i get by my key-----\nTargetNum is 2.92\n```\n\n这回我们看到，HashMap正常在工作呢，我们调转到hashmap的源码中去看看两个关键位置的操作\n1. put({key : value})\n2. get(key)\n\n发现Hashmap的底层实现是这样的，我们用一张图来说明：\n\n{% asset_img how_to_hash.png how_to_hash %}  \n\n\n<h5 id = 'my_hash_map'>更进一步,如何写个HashMap容器</h5>\n\n现在我们知道了散列的原理，那么实现一个简单的HashMap也就没那么困难呢，我们接下来也尝试实现一个简单的SimpleHashMap，在此之前，先和大家来看看一个标准的map容器是一个怎么样的大体结构，我们来仿照这个结构编写我们的hashmap\n\n{% asset_img abstract_map.jpg map_structure %}\n\nAbstractMap<K,V>这个抽象基类，这个基类包含了一个抽象方法public abstract Set<Map.Entry<K,V>> entrySet(),这个entrySet是用来存放键值对的集合的，我们实际的键值存放在Entry<K,V>中。这个Entry由我们自己提供，或者使用系统提供给我们的两个默认实现，SimpleEntry和SimpleImmutableEntry。\n\n那么我们按照这个结构，编写一个自己的hash map容器类：\n\n```Java\npackage ch17.deepincontainers;\nimport java.util.AbstractMap;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.*;\npublic class SimpleHashMap<K,V> extends AbstractMap<K, V> implements Map<K, V> {\n\tprivate final static int SIZE = 97;\n\tprivate LinkedList<Entry<K,V>>[] buckets = new LinkedList[97];\n\t@Override\n\tpublic V get(Object key) {\n\t\tint index = key==null?0:(key.hashCode()%SIZE);\n\t\tif(buckets[index] == null){\n\t\t\treturn null;\n\t\t}\n\t\tV value = null;\n\t\tfor(Entry<K,V> e : buckets[index]){\n\t\t\tif(e.getKey()==null){\n\t\t\t\tvalue = e.getValue();\n\t\t\t}\n\t\t\telse if(e.getKey().equals(key)){\n\t\t\t\tvalue = e.getValue();\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\t@Override\n\tpublic V put(K key, V value) {\n\t\t// TODO Auto-generated method stub\n\t\tV oldValue = get(key);\n\t\tint index = key==null?0:(key.hashCode()%SIZE);\n\t\tif(buckets[index]==null){\n\t\t\tbuckets[index] = new LinkedList<Entry<K,V>>();\n\t\t}\n\t\tif(buckets[index].size()>0){\n\t\t\tfor(Entry<K,V>e:buckets[index]){\n\t\t\t\tif(e.getKey()==null){\n\t\t\t\t\tbuckets[index].remove(e);\n\t\t\t\t\tbuckets[index].add(new SimpleEntry(key, value));\n\t\t\t\t}else if(e.getKey().equals(key)){\n\t\t\t\t\tbuckets[index].remove(e);\n\t\t\t\t\tbuckets[index].add(new SimpleEntry(key, value));\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\tbuckets[index].add(new SimpleEntry<K,V>(key,value)); \n\t\t}\n\t\treturn oldValue;\t\n\t}\n\t@Override\n\tpublic V remove(Object key) {\n\t\tint index = key==null ? 0 : (key.hashCode()%SIZE);\n\t\tif(buckets[index]==null){\n\t\t\treturn null;\n\t\t}\n\t\tV value = null;\n\t\tfor(Entry<K,V> e : buckets[index]){\n\t\t\tif(e.getKey()==null){\n\t\t\t\tvalue = e.getValue();\n\t\t\t\tbuckets[index].remove(e);\n\t\t\t}else if(e.getKey().equals(key)){\n\t\t\t\tvalue = e.getValue();\n\t\t\t\tbuckets[index].remove(e);\n\t\t\t}\n\t\t}\n\t\treturn value ;\n\t}\n\t@Override\n\tpublic Set<java.util.Map.Entry<K, V>> entrySet() {\n\t\tSet<Entry<K,V>> set =new HashSet<Entry<K,V>>();\n\t\tfor(List<Entry<K,V>> list:buckets){\n\t\t\tif(list==null){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tset.addAll(list);\n\t\t\t}\n\t\t}\n\t\treturn set;\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tSimpleHashMap<String,Integer> map = new SimpleHashMap<String,Integer>();\n\t\tmap.put(null, 1);\n\t\tmap.put(null, 2);\n\t\tmap.put(\"llcat\", 25);\n\t\tSystem.out.println(map.get(null));\n\t\tSystem.out.println(map.get(\"llcat\"));\n\t\tfor(Entry<String,Integer> e:map.entrySet())\n\t\t\tSystem.out.println(e.getKey());\n\t\tmap.remove(null);\n\t\tSystem.out.println(map.get(null));\n\t\tmap.remove(\"llcat\");\n\t\tSystem.out.println(map.get(\"llcat\"));\n\t}\n}\n```\n\n我们只覆写了几个常用的方法，其目的是理解散列到底是如何工作的。到此为止，我们应该对Map容器有了进一步的了解，希望大家可以去看看HashMap的源码实现。接下来我们看看如何给自己的类覆写一个好的hashCode()方法，比如像我们上面那样为shoooter类覆写的hashcode不是理想的实现，不好的hash值可能会导致将所有的键值对散列到了集中的几个桶位，这样导致散列的不够平均，查询速度也会慢上很多。\n\n","slug":"了解Map容器","published":1,"updated":"2018-07-19T03:43:58.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjxxlrpx0006b4htwm59c5vj","content":"<h4 id=\"一起看看Map容器吧\"><a href=\"#一起看看Map容器吧\" class=\"headerlink\" title=\"一起看看Map容器吧\"></a>一起看看Map容器吧</h4><p>之前学习Java容器类时做的笔记, 做为从wiznote中转移的第一篇文章, 主要是探讨了一下map容器, 我们如何去写一个hashmap? Java自带的hashmap底层实现是怎么样的呢? 带着这些问题,看看我们下面的内容吧!</p>\n<ul>\n<li><a href=\"#my_map\">写一个自己的简单map</a></li>\n<li><a href=\"#about_hash\">关于散列和散列码</a></li>\n<li><a href=\"#my_hash_map\">更进一步,如何写个HashMap容器</a></li>\n</ul>\n<h5 id=\"my_map\">写一个自己的简单map</h5>\n\n<p>我们来深入看看Map容器，他是如何工作的，有哪些类型的Map容器，我们如何选择自己需要的Map容器。<br>通常map容器也被叫做映射表，或者是关联数组，因为他是用来存储一组相关联的数据，即一组键值对，在标准的java容器类中包含下面几种类型的MAP实现:</p>\n<ul>\n<li>HashMap</li>\n<li>TreeMap</li>\n<li>LinkedHashMap</li>\n<li>WeakHashMap</li>\n<li><p>ConcurrentHashMap</p>\n<p>它们根据一些实际需求，在查找，键值对的保存顺序，是否支持并发而有一些不同的实现。我们今天不对他们的全部进行探讨,选取其中用的较多的hashmap来看一下吧。</p>\n<p><strong>step 1</strong><br>首先我们实现一个最简单的Map容器，他的底层是个数组，不支持扩展大小，查询效率也非常低，并且他不能对键值的唯一性保证。如下：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MappingTable</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Object[][] pairs;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MappingTable</span><span class=\"params\">(<span class=\"keyword\">int</span> length)</span></span>&#123;</span><br><span class=\"line\">\t\tpairs = <span class=\"keyword\">new</span> Object[length][<span class=\"number\">2</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(K key,V value)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;index;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(key.equals(pairs[i][<span class=\"number\">0</span>]))&#123;</span><br><span class=\"line\">\t\t\t\tpairs[i]=<span class=\"keyword\">new</span> Object[]&#123;key,value&#125;;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index&gt;=pairs.length)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArrayIndexOutOfBoundsException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpairs[index++] = <span class=\"keyword\">new</span> Object[]&#123;key,value&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(K key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;pairs.length;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(key.equals(pairs[i][<span class=\"number\">0</span>]))&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> (V)pairs[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tStringBuilder builder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;index;i++)&#123;</span><br><span class=\"line\">\t\t\tbuilder.append(pairs[i][<span class=\"number\">0</span>].toString());</span><br><span class=\"line\">\t\t\tbuilder.append(<span class=\"string\">\" : \"</span>);</span><br><span class=\"line\">\t\t\tbuilder.append(pairs[i][<span class=\"number\">1</span>].toString());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(index&gt;i)</span><br><span class=\"line\">\t\t\t\tbuilder.append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> builder.toString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\tMappingTable&lt;String,String&gt; map = <span class=\"keyword\">new</span> MappingTable&lt;String,String&gt;(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">\"kaka\"</span>,<span class=\"string\">\"15\"</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">\"lisa\"</span>,<span class=\"string\">\"20\"</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">\"yita\"</span>,<span class=\"string\">\"18\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(map);</span><br><span class=\"line\">\t\tSystem.out.println(map.get(<span class=\"string\">\"lisa\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个map实现的比较简单，可以看到上面我们自己实现的容器，无论是存放，还是取值，都要进行一次线性的查找，如果是几十个数据量还好，但是如果一个Map集合中想要存放成千上万个元素呢？难道我们每次都要从头到尾遍历一遍？这效率想想就低的可怕哈，有没有一种可以直接访问的方法，所以java类库的Map实现就引入了HashCode（散列码）的方式来取代对键值的缓慢的线性查找。在根类Object中，有一个hashCode()方法，他是一个native方法，默认是根据对象的某些信息转换得到的，理论上是相对唯一的，所有java对象都可以生成自己的散列码，而HashMap就是通过对象的散列码进行快速查询的。下面我们继续看看散列是啥。</p>\n<h5 id=\"about_hash\">散列和散列码</h5>\n\n<p>在看散列前，我们先看一个关于Hashmap的例子。测试Java中的hashmap到底是依靠什么进行工作的，是通过equals()方法保证键值的唯一吗？我们自己编写的类，不覆写hashcode()方法，存放在hash类型的集合中，能保证唯一吗？来看看吧！</p>\n<p>先来看一个例子，如果我们编写自己的类作为HashMap的键，不覆写他的hashCode(）方法，看看HashMap能否正常工作。</p>\n<blockquote>\n<p>射击运动员（键） — Shooter<br>他的射击靶数（值）— TargetNum</p>\n</blockquote>\n<p>Shooter类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> ch17.deepincontainers;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shooter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Shooter</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Shooter#\"</span>+id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>TargetNum类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> ch17.deepincontainers;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TargetNum</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Random rand = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">\tString targetNum = String.format(<span class=\"string\">\"TargetNum is %.2f\"</span>, rand.nextDouble()*<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> targetNum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>TestHashMap类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> ch17.deepincontainers;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map.Entry;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestHashMap</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\ttestHashMap(Shooter.class);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span>&lt;T extends Shooter&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testHashMap</span><span class=\"params\">(Class&lt;T&gt; type)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">\t\tMap&lt;Shooter,TargetNum&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Shooter,TargetNum&gt;();</span><br><span class=\"line\">\t\tConstructor&lt;T&gt; cons = type.getConstructor(<span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tmap.put(cons.newInstance(i), <span class=\"keyword\">new</span> TargetNum());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Entry e:map.entrySet())&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e+<span class=\"string\">\" hashcode: \"</span>+e.getKey().hashCode());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"-------after put------\"</span>);</span><br><span class=\"line\">\t\tmap.put(cons.newInstance(<span class=\"number\">3</span>),<span class=\"keyword\">new</span> TargetNum());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Entry e:map.entrySet())&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e+<span class=\"string\">\" hashcode: \"</span>+e.getKey().hashCode());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"-----can i get by my key-----\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(map.get(cons.newInstance(<span class=\"number\">3</span>)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看看下面的输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shooter#8=TargetNum is 0.04 hashcode: 621009875</span><br><span class=\"line\">Shooter#1=TargetNum is 8.33 hashcode: 1735600054</span><br><span class=\"line\">Shooter#4=TargetNum is 3.46 hashcode: 1836019240</span><br><span class=\"line\">Shooter#6=TargetNum is 7.27 hashcode: 1173230247</span><br><span class=\"line\">Shooter#9=TargetNum is 1.71 hashcode: 1265094477</span><br><span class=\"line\">* Shooter#3=TargetNum is 8.01 hashcode: 2133927002 </span><br><span class=\"line\">Shooter#5=TargetNum is 7.66 hashcode: 325040804</span><br><span class=\"line\">Shooter#0=TargetNum is 4.58 hashcode: 356573597</span><br><span class=\"line\">Shooter#2=TargetNum is 7.02 hashcode: 21685669</span><br><span class=\"line\">Shooter#7=TargetNum is 1.47 hashcode: 856419764</span><br><span class=\"line\">-------after put------</span><br><span class=\"line\">Shooter#8=TargetNum is 0.04 hashcode: 621009875</span><br><span class=\"line\">Shooter#1=TargetNum is 8.33 hashcode: 1735600054</span><br><span class=\"line\">* Shooter#3=TargetNum is 2.07 hashcode: 2125039532</span><br><span class=\"line\">Shooter#4=TargetNum is 3.46 hashcode: 1836019240</span><br><span class=\"line\">Shooter#6=TargetNum is 7.27 hashcode: 1173230247</span><br><span class=\"line\">Shooter#9=TargetNum is 1.71 hashcode: 1265094477</span><br><span class=\"line\">* Shooter#3=TargetNum is 8.01 hashcode: 2133927002</span><br><span class=\"line\">Shooter#5=TargetNum is 7.66 hashcode: 325040804</span><br><span class=\"line\">Shooter#0=TargetNum is 4.58 hashcode: 356573597</span><br><span class=\"line\">Shooter#2=TargetNum is 7.02 hashcode: 21685669</span><br><span class=\"line\">Shooter#7=TargetNum is 1.47 hashcode: 856419764</span><br><span class=\"line\">-----can i get by my key-----</span><br><span class=\"line\">null</span><br></pre></td></tr></table></figure>\n<p>结果显然是不能正常工作，不仅相同的键值被重复添加在map中呢，并且不能正常取值。在看hashmap的源码前，我们在进行下其他的猜想，其一，是不是没有覆写对象的equals方法导致添加了重复的键值，其二，没有覆写对象的hashcode方法导致我们无法取值，既然如此，我们在写两个类测试下。</p>\n<p>class ShooterJustOverEquals:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShooterJustOverEquals</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shooter</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShooterJustOverEquals</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> obj <span class=\"keyword\">instanceof</span> ShooterJustOverEquals &amp;&amp;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.getId() == ((ShooterJustOverEquals) obj).getId();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"ShooterJustOverEquals:\"</span>+getId();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">\t\tTestHashMap.testHashMap(ShooterJustOverEquals.class);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ShooterJustOverEquals:8=TargetNum is 3.04 hashcode: 621009875</span><br><span class=\"line\">ShooterJustOverEquals:1=TargetNum is 4.70 hashcode: 1735600054</span><br><span class=\"line\">ShooterJustOverEquals:4=TargetNum is 7.44 hashcode: 1836019240</span><br><span class=\"line\">ShooterJustOverEquals:6=TargetNum is 2.52 hashcode: 1173230247</span><br><span class=\"line\">ShooterJustOverEquals:9=TargetNum is 6.13 hashcode: 1265094477</span><br><span class=\"line\">* ShooterJustOverEquals:3=TargetNum is 4.84 hashcode: 2133927002</span><br><span class=\"line\">ShooterJustOverEquals:5=TargetNum is 4.85 hashcode: 325040804</span><br><span class=\"line\">ShooterJustOverEquals:0=TargetNum is 5.97 hashcode: 356573597</span><br><span class=\"line\">ShooterJustOverEquals:2=TargetNum is 8.69 hashcode: 21685669</span><br><span class=\"line\">ShooterJustOverEquals:7=TargetNum is 9.17 hashcode: 856419764</span><br><span class=\"line\">-------after put------</span><br><span class=\"line\">ShooterJustOverEquals:8=TargetNum is 3.04 hashcode: 621009875</span><br><span class=\"line\">ShooterJustOverEquals:1=TargetNum is 4.70 hashcode: 1735600054</span><br><span class=\"line\">* ShooterJustOverEquals:3=TargetNum is 3.35 hashcode: 2125039532</span><br><span class=\"line\">ShooterJustOverEquals:4=TargetNum is 7.44 hashcode: 1836019240</span><br><span class=\"line\">ShooterJustOverEquals:6=TargetNum is 2.52 hashcode: 1173230247</span><br><span class=\"line\">ShooterJustOverEquals:9=TargetNum is 6.13 hashcode: 1265094477</span><br><span class=\"line\">* ShooterJustOverEquals:3=TargetNum is 4.84 hashcode: 2133927002</span><br><span class=\"line\">ShooterJustOverEquals:5=TargetNum is 4.85 hashcode: 325040804</span><br><span class=\"line\">ShooterJustOverEquals:0=TargetNum is 5.97 hashcode: 356573597</span><br><span class=\"line\">ShooterJustOverEquals:2=TargetNum is 8.69 hashcode: 21685669</span><br><span class=\"line\">ShooterJustOverEquals:7=TargetNum is 9.17 hashcode: 856419764</span><br><span class=\"line\">-----can i get by my key-----</span><br><span class=\"line\">null</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们覆写了equls方法，但是没有起作用，我可以猜测是不是要结合hashcode方法才能生效呢？我们接下来继续试一把</p>\n<p>ShooterOverEqualsAndHashcode:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShooterOverEqAndHashcode</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShooterJustOverEquals</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShooterOverEqAndHashcode</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(id);</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getId();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"ShooterOverEqAndHashcode#\"</span>+getId();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tTestHashMap.testHashMap(ShooterOverEqAndHashcode.class);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ShooterOverEqAndHashcode#0=TargetNum is 6.34 hashcode: 0</span><br><span class=\"line\">ShooterOverEqAndHashcode#1=TargetNum is 1.33 hashcode: 1</span><br><span class=\"line\">ShooterOverEqAndHashcode#2=TargetNum is 1.13 hashcode: 2</span><br><span class=\"line\">ShooterOverEqAndHashcode#3=TargetNum is 6.43 hashcode: 3</span><br><span class=\"line\">ShooterOverEqAndHashcode#4=TargetNum is 4.49 hashcode: 4</span><br><span class=\"line\">ShooterOverEqAndHashcode#5=TargetNum is 9.18 hashcode: 5</span><br><span class=\"line\">ShooterOverEqAndHashcode#6=TargetNum is 0.67 hashcode: 6</span><br><span class=\"line\">ShooterOverEqAndHashcode#7=TargetNum is 2.66 hashcode: 7</span><br><span class=\"line\">ShooterOverEqAndHashcode#8=TargetNum is 8.27 hashcode: 8</span><br><span class=\"line\">ShooterOverEqAndHashcode#9=TargetNum is 4.49 hashcode: 9</span><br><span class=\"line\">-------after put------</span><br><span class=\"line\">ShooterOverEqAndHashcode#0=TargetNum is 6.34 hashcode: 0</span><br><span class=\"line\">ShooterOverEqAndHashcode#1=TargetNum is 1.33 hashcode: 1</span><br><span class=\"line\">ShooterOverEqAndHashcode#2=TargetNum is 1.13 hashcode: 2</span><br><span class=\"line\">ShooterOverEqAndHashcode#3=TargetNum is 2.92 hashcode: 3</span><br><span class=\"line\">ShooterOverEqAndHashcode#4=TargetNum is 4.49 hashcode: 4</span><br><span class=\"line\">ShooterOverEqAndHashcode#5=TargetNum is 9.18 hashcode: 5</span><br><span class=\"line\">ShooterOverEqAndHashcode#6=TargetNum is 0.67 hashcode: 6</span><br><span class=\"line\">ShooterOverEqAndHashcode#7=TargetNum is 2.66 hashcode: 7</span><br><span class=\"line\">ShooterOverEqAndHashcode#8=TargetNum is 8.27 hashcode: 8</span><br><span class=\"line\">ShooterOverEqAndHashcode#9=TargetNum is 4.49 hashcode: 9</span><br><span class=\"line\">-----can i get by my key-----</span><br><span class=\"line\">TargetNum is 2.92</span><br></pre></td></tr></table></figure>\n<p>这回我们看到，HashMap正常在工作呢，我们调转到hashmap的源码中去看看两个关键位置的操作</p>\n<ol>\n<li>put({key : value})</li>\n<li>get(key)</li>\n</ol>\n<p>发现Hashmap的底层实现是这样的，我们用一张图来说明：</p>\n<img src=\"/2017/04/19/了解Map容器/how_to_hash.png\" title=\"how_to_hash\">  \n<h5 id=\"my_hash_map\">更进一步,如何写个HashMap容器</h5>\n\n<p>现在我们知道了散列的原理，那么实现一个简单的HashMap也就没那么困难呢，我们接下来也尝试实现一个简单的SimpleHashMap，在此之前，先和大家来看看一个标准的map容器是一个怎么样的大体结构，我们来仿照这个结构编写我们的hashmap</p>\n<img src=\"/2017/04/19/了解Map容器/abstract_map.jpg\" title=\"map_structure\">\n<p>AbstractMap&lt;K,V&gt;这个抽象基类，这个基类包含了一个抽象方法public abstract Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet(),这个entrySet是用来存放键值对的集合的，我们实际的键值存放在Entry&lt;K,V&gt;中。这个Entry由我们自己提供，或者使用系统提供给我们的两个默认实现，SimpleEntry和SimpleImmutableEntry。</p>\n<p>那么我们按照这个结构，编写一个自己的hash map容器类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> ch17.deepincontainers;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.AbstractMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleHashMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> SIZE = <span class=\"number\">97</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> LinkedList&lt;Entry&lt;K,V&gt;&gt;[] buckets = <span class=\"keyword\">new</span> LinkedList[<span class=\"number\">97</span>];</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = key==<span class=\"keyword\">null</span>?<span class=\"number\">0</span>:(key.hashCode()%SIZE);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(buckets[index] == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tV value = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Entry&lt;K,V&gt; e : buckets[index])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(e.getKey()==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\tvalue = e.getValue();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(e.getKey().equals(key))&#123;</span><br><span class=\"line\">\t\t\t\tvalue = e.getValue();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tV oldValue = get(key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = key==<span class=\"keyword\">null</span>?<span class=\"number\">0</span>:(key.hashCode()%SIZE);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(buckets[index]==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\tbuckets[index] = <span class=\"keyword\">new</span> LinkedList&lt;Entry&lt;K,V&gt;&gt;();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(buckets[index].size()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(Entry&lt;K,V&gt;e:buckets[index])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(e.getKey()==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tbuckets[index].remove(e);</span><br><span class=\"line\">\t\t\t\t\tbuckets[index].add(<span class=\"keyword\">new</span> SimpleEntry(key, value));</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(e.getKey().equals(key))&#123;</span><br><span class=\"line\">\t\t\t\t\tbuckets[index].remove(e);</span><br><span class=\"line\">\t\t\t\t\tbuckets[index].add(<span class=\"keyword\">new</span> SimpleEntry(key, value));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tbuckets[index].add(<span class=\"keyword\">new</span> SimpleEntry&lt;K,V&gt;(key,value)); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> oldValue;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = key==<span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : (key.hashCode()%SIZE);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(buckets[index]==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tV value = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Entry&lt;K,V&gt; e : buckets[index])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(e.getKey()==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\tvalue = e.getValue();</span><br><span class=\"line\">\t\t\t\tbuckets[index].remove(e);</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(e.getKey().equals(key))&#123;</span><br><span class=\"line\">\t\t\t\tvalue = e.getValue();</span><br><span class=\"line\">\t\t\t\tbuckets[index].remove(e);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Set&lt;java.util.Map.Entry&lt;K, V&gt;&gt; entrySet() &#123;</span><br><span class=\"line\">\t\tSet&lt;Entry&lt;K,V&gt;&gt; set =<span class=\"keyword\">new</span> HashSet&lt;Entry&lt;K,V&gt;&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(List&lt;Entry&lt;K,V&gt;&gt; list:buckets)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(list==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tset.addAll(list);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> set;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\tSimpleHashMap&lt;String,Integer&gt; map = <span class=\"keyword\">new</span> SimpleHashMap&lt;String,Integer&gt;();</span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">null</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">\"llcat\"</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">\t\tSystem.out.println(map.get(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">\t\tSystem.out.println(map.get(<span class=\"string\">\"llcat\"</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Entry&lt;String,Integer&gt; e:map.entrySet())</span><br><span class=\"line\">\t\t\tSystem.out.println(e.getKey());</span><br><span class=\"line\">\t\tmap.remove(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tSystem.out.println(map.get(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">\t\tmap.remove(<span class=\"string\">\"llcat\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(map.get(<span class=\"string\">\"llcat\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们只覆写了几个常用的方法，其目的是理解散列到底是如何工作的。到此为止，我们应该对Map容器有了进一步的了解，希望大家可以去看看HashMap的源码实现。接下来我们看看如何给自己的类覆写一个好的hashCode()方法，比如像我们上面那样为shoooter类覆写的hashcode不是理想的实现，不好的hash值可能会导致将所有的键值对散列到了集中的几个桶位，这样导致散列的不够平均，查询速度也会慢上很多。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一起看看Map容器吧\"><a href=\"#一起看看Map容器吧\" class=\"headerlink\" title=\"一起看看Map容器吧\"></a>一起看看Map容器吧</h4><p>之前学习Java容器类时做的笔记, 做为从wiznote中转移的第一篇文章, 主要是探讨了一下map容器, 我们如何去写一个hashmap? Java自带的hashmap底层实现是怎么样的呢? 带着这些问题,看看我们下面的内容吧!</p>\n<ul>\n<li><a href=\"#my_map\">写一个自己的简单map</a></li>\n<li><a href=\"#about_hash\">关于散列和散列码</a></li>\n<li><a href=\"#my_hash_map\">更进一步,如何写个HashMap容器</a></li>\n</ul>\n<h5 id=\"my_map\">写一个自己的简单map</h5>\n\n<p>我们来深入看看Map容器，他是如何工作的，有哪些类型的Map容器，我们如何选择自己需要的Map容器。<br>通常map容器也被叫做映射表，或者是关联数组，因为他是用来存储一组相关联的数据，即一组键值对，在标准的java容器类中包含下面几种类型的MAP实现:</p>\n<ul>\n<li>HashMap</li>\n<li>TreeMap</li>\n<li>LinkedHashMap</li>\n<li>WeakHashMap</li>\n<li><p>ConcurrentHashMap</p>\n<p>它们根据一些实际需求，在查找，键值对的保存顺序，是否支持并发而有一些不同的实现。我们今天不对他们的全部进行探讨,选取其中用的较多的hashmap来看一下吧。</p>\n<p><strong>step 1</strong><br>首先我们实现一个最简单的Map容器，他的底层是个数组，不支持扩展大小，查询效率也非常低，并且他不能对键值的唯一性保证。如下：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MappingTable</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Object[][] pairs;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MappingTable</span><span class=\"params\">(<span class=\"keyword\">int</span> length)</span></span>&#123;</span><br><span class=\"line\">\t\tpairs = <span class=\"keyword\">new</span> Object[length][<span class=\"number\">2</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(K key,V value)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;index;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(key.equals(pairs[i][<span class=\"number\">0</span>]))&#123;</span><br><span class=\"line\">\t\t\t\tpairs[i]=<span class=\"keyword\">new</span> Object[]&#123;key,value&#125;;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index&gt;=pairs.length)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArrayIndexOutOfBoundsException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpairs[index++] = <span class=\"keyword\">new</span> Object[]&#123;key,value&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(K key)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;pairs.length;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(key.equals(pairs[i][<span class=\"number\">0</span>]))&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> (V)pairs[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tStringBuilder builder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;index;i++)&#123;</span><br><span class=\"line\">\t\t\tbuilder.append(pairs[i][<span class=\"number\">0</span>].toString());</span><br><span class=\"line\">\t\t\tbuilder.append(<span class=\"string\">\" : \"</span>);</span><br><span class=\"line\">\t\t\tbuilder.append(pairs[i][<span class=\"number\">1</span>].toString());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(index&gt;i)</span><br><span class=\"line\">\t\t\t\tbuilder.append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> builder.toString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\tMappingTable&lt;String,String&gt; map = <span class=\"keyword\">new</span> MappingTable&lt;String,String&gt;(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">\"kaka\"</span>,<span class=\"string\">\"15\"</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">\"lisa\"</span>,<span class=\"string\">\"20\"</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">\"yita\"</span>,<span class=\"string\">\"18\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(map);</span><br><span class=\"line\">\t\tSystem.out.println(map.get(<span class=\"string\">\"lisa\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个map实现的比较简单，可以看到上面我们自己实现的容器，无论是存放，还是取值，都要进行一次线性的查找，如果是几十个数据量还好，但是如果一个Map集合中想要存放成千上万个元素呢？难道我们每次都要从头到尾遍历一遍？这效率想想就低的可怕哈，有没有一种可以直接访问的方法，所以java类库的Map实现就引入了HashCode（散列码）的方式来取代对键值的缓慢的线性查找。在根类Object中，有一个hashCode()方法，他是一个native方法，默认是根据对象的某些信息转换得到的，理论上是相对唯一的，所有java对象都可以生成自己的散列码，而HashMap就是通过对象的散列码进行快速查询的。下面我们继续看看散列是啥。</p>\n<h5 id=\"about_hash\">散列和散列码</h5>\n\n<p>在看散列前，我们先看一个关于Hashmap的例子。测试Java中的hashmap到底是依靠什么进行工作的，是通过equals()方法保证键值的唯一吗？我们自己编写的类，不覆写hashcode()方法，存放在hash类型的集合中，能保证唯一吗？来看看吧！</p>\n<p>先来看一个例子，如果我们编写自己的类作为HashMap的键，不覆写他的hashCode(）方法，看看HashMap能否正常工作。</p>\n<blockquote>\n<p>射击运动员（键） — Shooter<br>他的射击靶数（值）— TargetNum</p>\n</blockquote>\n<p>Shooter类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> ch17.deepincontainers;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shooter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Shooter</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Shooter#\"</span>+id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>TargetNum类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> ch17.deepincontainers;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TargetNum</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Random rand = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">\tString targetNum = String.format(<span class=\"string\">\"TargetNum is %.2f\"</span>, rand.nextDouble()*<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> targetNum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>TestHashMap类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> ch17.deepincontainers;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map.Entry;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestHashMap</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\ttestHashMap(Shooter.class);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span>&lt;T extends Shooter&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testHashMap</span><span class=\"params\">(Class&lt;T&gt; type)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">\t\tMap&lt;Shooter,TargetNum&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Shooter,TargetNum&gt;();</span><br><span class=\"line\">\t\tConstructor&lt;T&gt; cons = type.getConstructor(<span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tmap.put(cons.newInstance(i), <span class=\"keyword\">new</span> TargetNum());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Entry e:map.entrySet())&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e+<span class=\"string\">\" hashcode: \"</span>+e.getKey().hashCode());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"-------after put------\"</span>);</span><br><span class=\"line\">\t\tmap.put(cons.newInstance(<span class=\"number\">3</span>),<span class=\"keyword\">new</span> TargetNum());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Entry e:map.entrySet())&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e+<span class=\"string\">\" hashcode: \"</span>+e.getKey().hashCode());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"-----can i get by my key-----\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(map.get(cons.newInstance(<span class=\"number\">3</span>)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看看下面的输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shooter#8=TargetNum is 0.04 hashcode: 621009875</span><br><span class=\"line\">Shooter#1=TargetNum is 8.33 hashcode: 1735600054</span><br><span class=\"line\">Shooter#4=TargetNum is 3.46 hashcode: 1836019240</span><br><span class=\"line\">Shooter#6=TargetNum is 7.27 hashcode: 1173230247</span><br><span class=\"line\">Shooter#9=TargetNum is 1.71 hashcode: 1265094477</span><br><span class=\"line\">* Shooter#3=TargetNum is 8.01 hashcode: 2133927002 </span><br><span class=\"line\">Shooter#5=TargetNum is 7.66 hashcode: 325040804</span><br><span class=\"line\">Shooter#0=TargetNum is 4.58 hashcode: 356573597</span><br><span class=\"line\">Shooter#2=TargetNum is 7.02 hashcode: 21685669</span><br><span class=\"line\">Shooter#7=TargetNum is 1.47 hashcode: 856419764</span><br><span class=\"line\">-------after put------</span><br><span class=\"line\">Shooter#8=TargetNum is 0.04 hashcode: 621009875</span><br><span class=\"line\">Shooter#1=TargetNum is 8.33 hashcode: 1735600054</span><br><span class=\"line\">* Shooter#3=TargetNum is 2.07 hashcode: 2125039532</span><br><span class=\"line\">Shooter#4=TargetNum is 3.46 hashcode: 1836019240</span><br><span class=\"line\">Shooter#6=TargetNum is 7.27 hashcode: 1173230247</span><br><span class=\"line\">Shooter#9=TargetNum is 1.71 hashcode: 1265094477</span><br><span class=\"line\">* Shooter#3=TargetNum is 8.01 hashcode: 2133927002</span><br><span class=\"line\">Shooter#5=TargetNum is 7.66 hashcode: 325040804</span><br><span class=\"line\">Shooter#0=TargetNum is 4.58 hashcode: 356573597</span><br><span class=\"line\">Shooter#2=TargetNum is 7.02 hashcode: 21685669</span><br><span class=\"line\">Shooter#7=TargetNum is 1.47 hashcode: 856419764</span><br><span class=\"line\">-----can i get by my key-----</span><br><span class=\"line\">null</span><br></pre></td></tr></table></figure>\n<p>结果显然是不能正常工作，不仅相同的键值被重复添加在map中呢，并且不能正常取值。在看hashmap的源码前，我们在进行下其他的猜想，其一，是不是没有覆写对象的equals方法导致添加了重复的键值，其二，没有覆写对象的hashcode方法导致我们无法取值，既然如此，我们在写两个类测试下。</p>\n<p>class ShooterJustOverEquals:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShooterJustOverEquals</span> <span class=\"keyword\">extends</span> <span class=\"title\">Shooter</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShooterJustOverEquals</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> obj <span class=\"keyword\">instanceof</span> ShooterJustOverEquals &amp;&amp;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.getId() == ((ShooterJustOverEquals) obj).getId();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"ShooterJustOverEquals:\"</span>+getId();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">\t\tTestHashMap.testHashMap(ShooterJustOverEquals.class);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ShooterJustOverEquals:8=TargetNum is 3.04 hashcode: 621009875</span><br><span class=\"line\">ShooterJustOverEquals:1=TargetNum is 4.70 hashcode: 1735600054</span><br><span class=\"line\">ShooterJustOverEquals:4=TargetNum is 7.44 hashcode: 1836019240</span><br><span class=\"line\">ShooterJustOverEquals:6=TargetNum is 2.52 hashcode: 1173230247</span><br><span class=\"line\">ShooterJustOverEquals:9=TargetNum is 6.13 hashcode: 1265094477</span><br><span class=\"line\">* ShooterJustOverEquals:3=TargetNum is 4.84 hashcode: 2133927002</span><br><span class=\"line\">ShooterJustOverEquals:5=TargetNum is 4.85 hashcode: 325040804</span><br><span class=\"line\">ShooterJustOverEquals:0=TargetNum is 5.97 hashcode: 356573597</span><br><span class=\"line\">ShooterJustOverEquals:2=TargetNum is 8.69 hashcode: 21685669</span><br><span class=\"line\">ShooterJustOverEquals:7=TargetNum is 9.17 hashcode: 856419764</span><br><span class=\"line\">-------after put------</span><br><span class=\"line\">ShooterJustOverEquals:8=TargetNum is 3.04 hashcode: 621009875</span><br><span class=\"line\">ShooterJustOverEquals:1=TargetNum is 4.70 hashcode: 1735600054</span><br><span class=\"line\">* ShooterJustOverEquals:3=TargetNum is 3.35 hashcode: 2125039532</span><br><span class=\"line\">ShooterJustOverEquals:4=TargetNum is 7.44 hashcode: 1836019240</span><br><span class=\"line\">ShooterJustOverEquals:6=TargetNum is 2.52 hashcode: 1173230247</span><br><span class=\"line\">ShooterJustOverEquals:9=TargetNum is 6.13 hashcode: 1265094477</span><br><span class=\"line\">* ShooterJustOverEquals:3=TargetNum is 4.84 hashcode: 2133927002</span><br><span class=\"line\">ShooterJustOverEquals:5=TargetNum is 4.85 hashcode: 325040804</span><br><span class=\"line\">ShooterJustOverEquals:0=TargetNum is 5.97 hashcode: 356573597</span><br><span class=\"line\">ShooterJustOverEquals:2=TargetNum is 8.69 hashcode: 21685669</span><br><span class=\"line\">ShooterJustOverEquals:7=TargetNum is 9.17 hashcode: 856419764</span><br><span class=\"line\">-----can i get by my key-----</span><br><span class=\"line\">null</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们覆写了equls方法，但是没有起作用，我可以猜测是不是要结合hashcode方法才能生效呢？我们接下来继续试一把</p>\n<p>ShooterOverEqualsAndHashcode:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShooterOverEqAndHashcode</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShooterJustOverEquals</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShooterOverEqAndHashcode</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(id);</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getId();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"ShooterOverEqAndHashcode#\"</span>+getId();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tTestHashMap.testHashMap(ShooterOverEqAndHashcode.class);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ShooterOverEqAndHashcode#0=TargetNum is 6.34 hashcode: 0</span><br><span class=\"line\">ShooterOverEqAndHashcode#1=TargetNum is 1.33 hashcode: 1</span><br><span class=\"line\">ShooterOverEqAndHashcode#2=TargetNum is 1.13 hashcode: 2</span><br><span class=\"line\">ShooterOverEqAndHashcode#3=TargetNum is 6.43 hashcode: 3</span><br><span class=\"line\">ShooterOverEqAndHashcode#4=TargetNum is 4.49 hashcode: 4</span><br><span class=\"line\">ShooterOverEqAndHashcode#5=TargetNum is 9.18 hashcode: 5</span><br><span class=\"line\">ShooterOverEqAndHashcode#6=TargetNum is 0.67 hashcode: 6</span><br><span class=\"line\">ShooterOverEqAndHashcode#7=TargetNum is 2.66 hashcode: 7</span><br><span class=\"line\">ShooterOverEqAndHashcode#8=TargetNum is 8.27 hashcode: 8</span><br><span class=\"line\">ShooterOverEqAndHashcode#9=TargetNum is 4.49 hashcode: 9</span><br><span class=\"line\">-------after put------</span><br><span class=\"line\">ShooterOverEqAndHashcode#0=TargetNum is 6.34 hashcode: 0</span><br><span class=\"line\">ShooterOverEqAndHashcode#1=TargetNum is 1.33 hashcode: 1</span><br><span class=\"line\">ShooterOverEqAndHashcode#2=TargetNum is 1.13 hashcode: 2</span><br><span class=\"line\">ShooterOverEqAndHashcode#3=TargetNum is 2.92 hashcode: 3</span><br><span class=\"line\">ShooterOverEqAndHashcode#4=TargetNum is 4.49 hashcode: 4</span><br><span class=\"line\">ShooterOverEqAndHashcode#5=TargetNum is 9.18 hashcode: 5</span><br><span class=\"line\">ShooterOverEqAndHashcode#6=TargetNum is 0.67 hashcode: 6</span><br><span class=\"line\">ShooterOverEqAndHashcode#7=TargetNum is 2.66 hashcode: 7</span><br><span class=\"line\">ShooterOverEqAndHashcode#8=TargetNum is 8.27 hashcode: 8</span><br><span class=\"line\">ShooterOverEqAndHashcode#9=TargetNum is 4.49 hashcode: 9</span><br><span class=\"line\">-----can i get by my key-----</span><br><span class=\"line\">TargetNum is 2.92</span><br></pre></td></tr></table></figure>\n<p>这回我们看到，HashMap正常在工作呢，我们调转到hashmap的源码中去看看两个关键位置的操作</p>\n<ol>\n<li>put({key : value})</li>\n<li>get(key)</li>\n</ol>\n<p>发现Hashmap的底层实现是这样的，我们用一张图来说明：</p>\n<img src=\"/2017/04/19/了解Map容器/how_to_hash.png\" title=\"how_to_hash\">  \n<h5 id=\"my_hash_map\">更进一步,如何写个HashMap容器</h5>\n\n<p>现在我们知道了散列的原理，那么实现一个简单的HashMap也就没那么困难呢，我们接下来也尝试实现一个简单的SimpleHashMap，在此之前，先和大家来看看一个标准的map容器是一个怎么样的大体结构，我们来仿照这个结构编写我们的hashmap</p>\n<img src=\"/2017/04/19/了解Map容器/abstract_map.jpg\" title=\"map_structure\">\n<p>AbstractMap&lt;K,V&gt;这个抽象基类，这个基类包含了一个抽象方法public abstract Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet(),这个entrySet是用来存放键值对的集合的，我们实际的键值存放在Entry&lt;K,V&gt;中。这个Entry由我们自己提供，或者使用系统提供给我们的两个默认实现，SimpleEntry和SimpleImmutableEntry。</p>\n<p>那么我们按照这个结构，编写一个自己的hash map容器类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> ch17.deepincontainers;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.AbstractMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleHashMap</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> SIZE = <span class=\"number\">97</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> LinkedList&lt;Entry&lt;K,V&gt;&gt;[] buckets = <span class=\"keyword\">new</span> LinkedList[<span class=\"number\">97</span>];</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = key==<span class=\"keyword\">null</span>?<span class=\"number\">0</span>:(key.hashCode()%SIZE);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(buckets[index] == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tV value = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Entry&lt;K,V&gt; e : buckets[index])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(e.getKey()==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\tvalue = e.getValue();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(e.getKey().equals(key))&#123;</span><br><span class=\"line\">\t\t\t\tvalue = e.getValue();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tV oldValue = get(key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = key==<span class=\"keyword\">null</span>?<span class=\"number\">0</span>:(key.hashCode()%SIZE);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(buckets[index]==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\tbuckets[index] = <span class=\"keyword\">new</span> LinkedList&lt;Entry&lt;K,V&gt;&gt;();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(buckets[index].size()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(Entry&lt;K,V&gt;e:buckets[index])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(e.getKey()==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tbuckets[index].remove(e);</span><br><span class=\"line\">\t\t\t\t\tbuckets[index].add(<span class=\"keyword\">new</span> SimpleEntry(key, value));</span><br><span class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(e.getKey().equals(key))&#123;</span><br><span class=\"line\">\t\t\t\t\tbuckets[index].remove(e);</span><br><span class=\"line\">\t\t\t\t\tbuckets[index].add(<span class=\"keyword\">new</span> SimpleEntry(key, value));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tbuckets[index].add(<span class=\"keyword\">new</span> SimpleEntry&lt;K,V&gt;(key,value)); </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> oldValue;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = key==<span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : (key.hashCode()%SIZE);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(buckets[index]==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tV value = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Entry&lt;K,V&gt; e : buckets[index])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(e.getKey()==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\tvalue = e.getValue();</span><br><span class=\"line\">\t\t\t\tbuckets[index].remove(e);</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(e.getKey().equals(key))&#123;</span><br><span class=\"line\">\t\t\t\tvalue = e.getValue();</span><br><span class=\"line\">\t\t\t\tbuckets[index].remove(e);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value ;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Set&lt;java.util.Map.Entry&lt;K, V&gt;&gt; entrySet() &#123;</span><br><span class=\"line\">\t\tSet&lt;Entry&lt;K,V&gt;&gt; set =<span class=\"keyword\">new</span> HashSet&lt;Entry&lt;K,V&gt;&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(List&lt;Entry&lt;K,V&gt;&gt; list:buckets)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(list==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tset.addAll(list);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> set;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\tSimpleHashMap&lt;String,Integer&gt; map = <span class=\"keyword\">new</span> SimpleHashMap&lt;String,Integer&gt;();</span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">null</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"keyword\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">\"llcat\"</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">\t\tSystem.out.println(map.get(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">\t\tSystem.out.println(map.get(<span class=\"string\">\"llcat\"</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Entry&lt;String,Integer&gt; e:map.entrySet())</span><br><span class=\"line\">\t\t\tSystem.out.println(e.getKey());</span><br><span class=\"line\">\t\tmap.remove(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tSystem.out.println(map.get(<span class=\"keyword\">null</span>));</span><br><span class=\"line\">\t\tmap.remove(<span class=\"string\">\"llcat\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(map.get(<span class=\"string\">\"llcat\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们只覆写了几个常用的方法，其目的是理解散列到底是如何工作的。到此为止，我们应该对Map容器有了进一步的了解，希望大家可以去看看HashMap的源码实现。接下来我们看看如何给自己的类覆写一个好的hashCode()方法，比如像我们上面那样为shoooter类覆写的hashcode不是理想的实现，不好的hash值可能会导致将所有的键值对散列到了集中的几个桶位，这样导致散列的不够平均，查询速度也会慢上很多。</p>\n"},{"title":"hexo+githubpages搭建个人blog","date":"2017-04-13T13:29:35.000Z","_content":"#### 为什么我要选hexo?\n一直以来想要自己搭个博客,甚至有想建站搭个动态博客的想法,但是败给了懒......\n然后在逛一些大大的blog时发现,他们的博文写的好也就算了,为啥界面还这么好看,然后就就发现了hexo这个草鸡漂亮而且方便好用的blog框架,好吧,种草许久了,早就想拔呢,最近这段时间也想把先前写在wiznote中的笔记转出来,好吧,那让我们开始愉快的动手吧。\n\n#### 工具准备（带把小铁锤开始我们的工作吧）\n\ntool | link\n- | -\ngit | https://git-scm.com/\nnode.js | https://nodejs.org/en/\ngithub pages| https://pages.github.com/\n\n上面列举的工具就是我们接下来会用到的啦，请大家根据需要自行去官网下载:-O\n因为我是用的linux-ubantu,所以git是自带的，我需要准备工具\n只有node.js呢，当然我会在后面给出相关工具安装使用的帖子，希望能帮到大家。\n\n- node.js的安装\n好吧，Linux下好像不需要装，下载后解压即用，真刺激。需要注意的是为了方便使用，我们最好需要对node,和npm做两个全局的链接。\n```\n# 我将node.js执行文件解压后放在了 /usr/local/node/呢，当然这个你们随意啦\n# ln(link) -s (建一个软链接) 源文件(解压后的目录下的程序）  目标文件(生成的链接文件） \nln -s /usr/local/node-v6.10.2/bin/node /usr/local/bin/node\nln -s /usr/local/node-v6.10.2/bin/npm /usr/local/bin/npm\n```\n- hexo安装\nhexo安装命令就在他们的官网首页，相当的简单，just one!\n```\n# 可能我们需要给hexo也配置下全局的一个链接，同上\nnpm install hexo-cli -g\n```\n到此我们需要的工具准备完毕了，如果大家在安装过程中遇到了什么困难，可以参考下面的文档或blog\n> [hexo 中文文档](https://hexo.io/zh-cn/)\n[ubantu下安装hexo blog](https://segmentfault.com/a/1190000002665530)\n\n#### 开始用它之前尝试了解它吧\n\nhexo给我们提供了详尽的文档，很多具体的细节需要我们去通读一遍[hexo docs](https://hexo.io/zh-cn/),下面是我自己对文档内容的一些梳理。\n\n- 大体步骤\n  - [建站](#create-site)\n  - [更改配置文件](#edit-config)\n  - [写作](#writing)\n  - [部署](#deploy-blog)\n\n<h5 id='create-site'>建站</h5>\n    \n```\nhexo init blog\ncd blog\nnpm install\nhexo server\n```\n    \n上面的几条命令是建站的基本命令了，其中npm install默认是安装需要的工具，其中包括了我们的hexo server,所有安装的工具都可以在根目录下的package.json中看到了。\nhexo init 之后，整个文件夹变为我们的工作目录，目录结构如下：\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n文件 | 作用\n- | -\n_config.yml | 我们配置的主要信息都在这，网站标题，url，站点存放目录，主题，模板设置等，[详情](#detail-config)\npackage.json | 已经安装的工具信息\nscaffolds | 模板文件，我们的每篇blog肯定有一些相同的内容，如开头的[front-matter](https://hexo.io/zh-cn/docs/front-matter.html),默认scaffolds文件夹中包含3个模板，post.md,page.md,drafts.md对应了我们三种layout(布局）\nsource | 存放一些源文件，包括我们的blog.md,在_post中存放那个的是以hexo [layout,default post] new title.md建立的文件\nthemes | 主题，你可以在[hexo-themes](https://hexo.io/themes/)挑选一个自己喜欢的主题替换默认的landscape,我使用了litten大大的[yilia主题](https://github.com/litten/hexo-theme-yilia)\n\n\n<h5 id='edit-config'>修改配置文件</h5>\n\n我们需要简单修改下默认的_config.yml文件，替换为自己的一些信息就可以使用呢，详情[参考](https://hexo.io/zh-cn/docs/configuration.html)\n一般来说，我们仅需要修改下面几个相关内容的配置就可以使用了\n- 网站\n\n参数 | 说明\n- | -\ntitle | 网站的标题\ndescription | 网站的描述\nauthor | 作者\nlanguage | 网站使用的语言\n\n- 网址\n\n参数 | 说明\n - | -\nurl | 你blog的url,比如使用的是github pages,那么改为https:username.github.io\nroot | 根目录，一般为/，如果你想把部署的静态文件放在网站的二级目录www.xxx.com/blog下，设置为/blog\n\n- 目录\n\n配置工作目录的一些信息，比如源文件，标签文件，分类文件存放在那些目录下，对于新手来说，不需要更改此部分的配置\n\n- 文章\n\n对于文章的一些设置，如设置标题格式，文章默认布局，是否显示草稿等\n\n\n<h5 id = 'writing'>写作</h5>\n\n我们开始写作时，需要新建一篇文章，使用hexo new 'xxx.md',这个命令会在source的_post中生成一个xxx.md文件，我们可以在scaffolds中建立自己的layout模板文件，使用自己的模板新建文章\n\n```\n# post是我们配置的默认模板，可以省略不写\nhexo new post 'hexo+github pages搭建个人blog.md'\n# 还可以使用自己的模板文件新建文章\nhexo new myscaffolds 'xxx.md'\n```\n\n> \n> [markdown 语法]( https://guides.github.com/features/mastering-markdown/)\n\n对于写好的文章，我们通过`hexo g `or `hexo generate`来生成静态文件，这些文件存放在public文件夹中，也是我们需要部署到网站上的文件，包括一些配置文件,html,css,js，img等。\n\n<h5 id = 'deploy-blog'>部署blog</h5>\n\n部署blog的方式有很多种，官方提供了多样化的部署方式，我们本次采用的方式是基于git部署我们的blog到github page上去，需要安装一个新的工具\n\n```\nnpm install hexo-deployer-git --save\n```\n修改配置文件_config.yml\n```\ndeploy:\n  type: git\n  repo: git@github.com:llcat/llcat.github.io.git\n```\n部署\n```\nhexo deploy\n# 或者用简称\nhexo d\n```\n\n<h5 id='my-error'>使用过程中的一些错误</h5>\n\n> 自己出现的一些错误\n开启了post_asset_folder: true后\n将图片放在相应文件夹下时，使用hexo g生成文件时报错如下\nFATAL ENOTDIR: not a directory, open '/home/ypl/StudyNotes/blog/public/java/了解Map容器/2017-04/abstract_map.jpg'\n说找不到这个文件夹，百度了一圈后发现是在_config.yml文件中一个设置出现了错误，在year-:month后少打了一个反斜线，hexo认为我配置的这个永久链接是个文件，不是文件夹，更改配置如下后正常\npermalink: :category/:title/:year-:month/\n\n\n\n\n\n\n","source":"_posts/hexo-githubpages搭建个人blog.md","raw":"---\ntitle: hexo+githubpages搭建个人blog\ndate: 2017-04-13 21:29:35\ntags: \n- github pages\n- hexo\ncategories:\n- others\n---\n#### 为什么我要选hexo?\n一直以来想要自己搭个博客,甚至有想建站搭个动态博客的想法,但是败给了懒......\n然后在逛一些大大的blog时发现,他们的博文写的好也就算了,为啥界面还这么好看,然后就就发现了hexo这个草鸡漂亮而且方便好用的blog框架,好吧,种草许久了,早就想拔呢,最近这段时间也想把先前写在wiznote中的笔记转出来,好吧,那让我们开始愉快的动手吧。\n\n#### 工具准备（带把小铁锤开始我们的工作吧）\n\ntool | link\n- | -\ngit | https://git-scm.com/\nnode.js | https://nodejs.org/en/\ngithub pages| https://pages.github.com/\n\n上面列举的工具就是我们接下来会用到的啦，请大家根据需要自行去官网下载:-O\n因为我是用的linux-ubantu,所以git是自带的，我需要准备工具\n只有node.js呢，当然我会在后面给出相关工具安装使用的帖子，希望能帮到大家。\n\n- node.js的安装\n好吧，Linux下好像不需要装，下载后解压即用，真刺激。需要注意的是为了方便使用，我们最好需要对node,和npm做两个全局的链接。\n```\n# 我将node.js执行文件解压后放在了 /usr/local/node/呢，当然这个你们随意啦\n# ln(link) -s (建一个软链接) 源文件(解压后的目录下的程序）  目标文件(生成的链接文件） \nln -s /usr/local/node-v6.10.2/bin/node /usr/local/bin/node\nln -s /usr/local/node-v6.10.2/bin/npm /usr/local/bin/npm\n```\n- hexo安装\nhexo安装命令就在他们的官网首页，相当的简单，just one!\n```\n# 可能我们需要给hexo也配置下全局的一个链接，同上\nnpm install hexo-cli -g\n```\n到此我们需要的工具准备完毕了，如果大家在安装过程中遇到了什么困难，可以参考下面的文档或blog\n> [hexo 中文文档](https://hexo.io/zh-cn/)\n[ubantu下安装hexo blog](https://segmentfault.com/a/1190000002665530)\n\n#### 开始用它之前尝试了解它吧\n\nhexo给我们提供了详尽的文档，很多具体的细节需要我们去通读一遍[hexo docs](https://hexo.io/zh-cn/),下面是我自己对文档内容的一些梳理。\n\n- 大体步骤\n  - [建站](#create-site)\n  - [更改配置文件](#edit-config)\n  - [写作](#writing)\n  - [部署](#deploy-blog)\n\n<h5 id='create-site'>建站</h5>\n    \n```\nhexo init blog\ncd blog\nnpm install\nhexo server\n```\n    \n上面的几条命令是建站的基本命令了，其中npm install默认是安装需要的工具，其中包括了我们的hexo server,所有安装的工具都可以在根目录下的package.json中看到了。\nhexo init 之后，整个文件夹变为我们的工作目录，目录结构如下：\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n文件 | 作用\n- | -\n_config.yml | 我们配置的主要信息都在这，网站标题，url，站点存放目录，主题，模板设置等，[详情](#detail-config)\npackage.json | 已经安装的工具信息\nscaffolds | 模板文件，我们的每篇blog肯定有一些相同的内容，如开头的[front-matter](https://hexo.io/zh-cn/docs/front-matter.html),默认scaffolds文件夹中包含3个模板，post.md,page.md,drafts.md对应了我们三种layout(布局）\nsource | 存放一些源文件，包括我们的blog.md,在_post中存放那个的是以hexo [layout,default post] new title.md建立的文件\nthemes | 主题，你可以在[hexo-themes](https://hexo.io/themes/)挑选一个自己喜欢的主题替换默认的landscape,我使用了litten大大的[yilia主题](https://github.com/litten/hexo-theme-yilia)\n\n\n<h5 id='edit-config'>修改配置文件</h5>\n\n我们需要简单修改下默认的_config.yml文件，替换为自己的一些信息就可以使用呢，详情[参考](https://hexo.io/zh-cn/docs/configuration.html)\n一般来说，我们仅需要修改下面几个相关内容的配置就可以使用了\n- 网站\n\n参数 | 说明\n- | -\ntitle | 网站的标题\ndescription | 网站的描述\nauthor | 作者\nlanguage | 网站使用的语言\n\n- 网址\n\n参数 | 说明\n - | -\nurl | 你blog的url,比如使用的是github pages,那么改为https:username.github.io\nroot | 根目录，一般为/，如果你想把部署的静态文件放在网站的二级目录www.xxx.com/blog下，设置为/blog\n\n- 目录\n\n配置工作目录的一些信息，比如源文件，标签文件，分类文件存放在那些目录下，对于新手来说，不需要更改此部分的配置\n\n- 文章\n\n对于文章的一些设置，如设置标题格式，文章默认布局，是否显示草稿等\n\n\n<h5 id = 'writing'>写作</h5>\n\n我们开始写作时，需要新建一篇文章，使用hexo new 'xxx.md',这个命令会在source的_post中生成一个xxx.md文件，我们可以在scaffolds中建立自己的layout模板文件，使用自己的模板新建文章\n\n```\n# post是我们配置的默认模板，可以省略不写\nhexo new post 'hexo+github pages搭建个人blog.md'\n# 还可以使用自己的模板文件新建文章\nhexo new myscaffolds 'xxx.md'\n```\n\n> \n> [markdown 语法]( https://guides.github.com/features/mastering-markdown/)\n\n对于写好的文章，我们通过`hexo g `or `hexo generate`来生成静态文件，这些文件存放在public文件夹中，也是我们需要部署到网站上的文件，包括一些配置文件,html,css,js，img等。\n\n<h5 id = 'deploy-blog'>部署blog</h5>\n\n部署blog的方式有很多种，官方提供了多样化的部署方式，我们本次采用的方式是基于git部署我们的blog到github page上去，需要安装一个新的工具\n\n```\nnpm install hexo-deployer-git --save\n```\n修改配置文件_config.yml\n```\ndeploy:\n  type: git\n  repo: git@github.com:llcat/llcat.github.io.git\n```\n部署\n```\nhexo deploy\n# 或者用简称\nhexo d\n```\n\n<h5 id='my-error'>使用过程中的一些错误</h5>\n\n> 自己出现的一些错误\n开启了post_asset_folder: true后\n将图片放在相应文件夹下时，使用hexo g生成文件时报错如下\nFATAL ENOTDIR: not a directory, open '/home/ypl/StudyNotes/blog/public/java/了解Map容器/2017-04/abstract_map.jpg'\n说找不到这个文件夹，百度了一圈后发现是在_config.yml文件中一个设置出现了错误，在year-:month后少打了一个反斜线，hexo认为我配置的这个永久链接是个文件，不是文件夹，更改配置如下后正常\npermalink: :category/:title/:year-:month/\n\n\n\n\n\n\n","slug":"hexo-githubpages搭建个人blog","published":1,"updated":"2018-07-19T03:43:58.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjxxlrpz000ab4htmyueeild","content":"<h4 id=\"为什么我要选hexo\"><a href=\"#为什么我要选hexo\" class=\"headerlink\" title=\"为什么我要选hexo?\"></a>为什么我要选hexo?</h4><p>一直以来想要自己搭个博客,甚至有想建站搭个动态博客的想法,但是败给了懒……<br>然后在逛一些大大的blog时发现,他们的博文写的好也就算了,为啥界面还这么好看,然后就就发现了hexo这个草鸡漂亮而且方便好用的blog框架,好吧,种草许久了,早就想拔呢,最近这段时间也想把先前写在wiznote中的笔记转出来,好吧,那让我们开始愉快的动手吧。</p>\n<h4 id=\"工具准备（带把小铁锤开始我们的工作吧）\"><a href=\"#工具准备（带把小铁锤开始我们的工作吧）\" class=\"headerlink\" title=\"工具准备（带把小铁锤开始我们的工作吧）\"></a>工具准备（带把小铁锤开始我们的工作吧）</h4><table>\n<thead>\n<tr>\n<th>tool</th>\n<th>link</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>git</td>\n<td><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></td>\n</tr>\n<tr>\n<td>node.js</td>\n<td><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a></td>\n</tr>\n<tr>\n<td>github pages</td>\n<td><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">https://pages.github.com/</a></td>\n</tr>\n</tbody>\n</table>\n<p>上面列举的工具就是我们接下来会用到的啦，请大家根据需要自行去官网下载:-O<br>因为我是用的linux-ubantu,所以git是自带的，我需要准备工具<br>只有node.js呢，当然我会在后面给出相关工具安装使用的帖子，希望能帮到大家。</p>\n<ul>\n<li><p>node.js的安装<br>好吧，Linux下好像不需要装，下载后解压即用，真刺激。需要注意的是为了方便使用，我们最好需要对node,和npm做两个全局的链接。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 我将node.js执行文件解压后放在了 /usr/local/node/呢，当然这个你们随意啦</span><br><span class=\"line\"># ln(link) -s (建一个软链接) 源文件(解压后的目录下的程序）  目标文件(生成的链接文件） </span><br><span class=\"line\">ln -s /usr/local/node-v6.10.2/bin/node /usr/local/bin/node</span><br><span class=\"line\">ln -s /usr/local/node-v6.10.2/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>hexo安装<br>hexo安装命令就在他们的官网首页，相当的简单，just one!</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 可能我们需要给hexo也配置下全局的一个链接，同上</span><br><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>到此我们需要的工具准备完毕了，如果大家在安装过程中遇到了什么困难，可以参考下面的文档或blog</p>\n<blockquote>\n<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo 中文文档</a><br><a href=\"https://segmentfault.com/a/1190000002665530\" target=\"_blank\" rel=\"noopener\">ubantu下安装hexo blog</a></p>\n</blockquote>\n<h4 id=\"开始用它之前尝试了解它吧\"><a href=\"#开始用它之前尝试了解它吧\" class=\"headerlink\" title=\"开始用它之前尝试了解它吧\"></a>开始用它之前尝试了解它吧</h4><p>hexo给我们提供了详尽的文档，很多具体的细节需要我们去通读一遍<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo docs</a>,下面是我自己对文档内容的一些梳理。</p>\n<ul>\n<li>大体步骤<ul>\n<li><a href=\"#create-site\">建站</a></li>\n<li><a href=\"#edit-config\">更改配置文件</a></li>\n<li><a href=\"#writing\">写作</a></li>\n<li><a href=\"#deploy-blog\">部署</a></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"create-site\">建站</h5>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>上面的几条命令是建站的基本命令了，其中npm install默认是安装需要的工具，其中包括了我们的hexo server,所有安装的工具都可以在根目录下的package.json中看到了。<br>hexo init 之后，整个文件夹变为我们的工作目录，目录结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>文件</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>_config.yml</td>\n<td>我们配置的主要信息都在这，网站标题，url，站点存放目录，主题，模板设置等，<a href=\"#detail-config\">详情</a></td>\n</tr>\n<tr>\n<td>package.json</td>\n<td>已经安装的工具信息</td>\n</tr>\n<tr>\n<td>scaffolds</td>\n<td>模板文件，我们的每篇blog肯定有一些相同的内容，如开头的<a href=\"https://hexo.io/zh-cn/docs/front-matter.html\" target=\"_blank\" rel=\"noopener\">front-matter</a>,默认scaffolds文件夹中包含3个模板，post.md,page.md,drafts.md对应了我们三种layout(布局）</td>\n</tr>\n<tr>\n<td>source</td>\n<td>存放一些源文件，包括我们的blog.md,在_post中存放那个的是以hexo [layout,default post] new title.md建立的文件</td>\n</tr>\n<tr>\n<td>themes</td>\n<td>主题，你可以在<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo-themes</a>挑选一个自己喜欢的主题替换默认的landscape,我使用了litten大大的<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">yilia主题</a></td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"edit-config\">修改配置文件</h5>\n\n<p>我们需要简单修改下默认的_config.yml文件，替换为自己的一些信息就可以使用呢，详情<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">参考</a><br>一般来说，我们仅需要修改下面几个相关内容的配置就可以使用了</p>\n<ul>\n<li>网站</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>网站的标题</td>\n</tr>\n<tr>\n<td>description</td>\n<td>网站的描述</td>\n</tr>\n<tr>\n<td>author</td>\n<td>作者</td>\n</tr>\n<tr>\n<td>language</td>\n<td>网站使用的语言</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>网址</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>你blog的url,比如使用的是github pages,那么改为https:username.github.io</td>\n</tr>\n<tr>\n<td>root</td>\n<td>根目录，一般为/，如果你想把部署的静态文件放在网站的二级目录<a href=\"http://www.xxx.com/blog下，设置为/blog\" target=\"_blank\" rel=\"noopener\">www.xxx.com/blog下，设置为/blog</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>目录</li>\n</ul>\n<p>配置工作目录的一些信息，比如源文件，标签文件，分类文件存放在那些目录下，对于新手来说，不需要更改此部分的配置</p>\n<ul>\n<li>文章</li>\n</ul>\n<p>对于文章的一些设置，如设置标题格式，文章默认布局，是否显示草稿等</p>\n<h5 id=\"writing\">写作</h5>\n\n<p>我们开始写作时，需要新建一篇文章，使用hexo new ‘xxx.md’,这个命令会在source的_post中生成一个xxx.md文件，我们可以在scaffolds中建立自己的layout模板文件，使用自己的模板新建文章</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># post是我们配置的默认模板，可以省略不写</span><br><span class=\"line\">hexo new post &apos;hexo+github pages搭建个人blog.md&apos;</span><br><span class=\"line\"># 还可以使用自己的模板文件新建文章</span><br><span class=\"line\">hexo new myscaffolds &apos;xxx.md&apos;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://guides.github.com/features/mastering-markdown/\" target=\"_blank\" rel=\"noopener\">markdown 语法</a></p>\n</blockquote>\n<p>对于写好的文章，我们通过<code>hexo g</code>or <code>hexo generate</code>来生成静态文件，这些文件存放在public文件夹中，也是我们需要部署到网站上的文件，包括一些配置文件,html,css,js，img等。</p>\n<h5 id=\"deploy-blog\">部署blog</h5>\n\n<p>部署blog的方式有很多种，官方提供了多样化的部署方式，我们本次采用的方式是基于git部署我们的blog到github page上去，需要安装一个新的工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>修改配置文件_config.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:llcat/llcat.github.io.git</span><br></pre></td></tr></table></figure></p>\n<p>部署<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br><span class=\"line\"># 或者用简称</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"my-error\">使用过程中的一些错误</h5>\n\n<blockquote>\n<p>自己出现的一些错误<br>开启了post_asset_folder: true后<br>将图片放在相应文件夹下时，使用hexo g生成文件时报错如下<br>FATAL ENOTDIR: not a directory, open ‘/home/ypl/StudyNotes/blog/public/java/了解Map容器/2017-04/abstract_map.jpg’<br>说找不到这个文件夹，百度了一圈后发现是在_config.yml文件中一个设置出现了错误，在year-:month后少打了一个反斜线，hexo认为我配置的这个永久链接是个文件，不是文件夹，更改配置如下后正常<br>permalink: :category/:title/:year-:month/</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"为什么我要选hexo\"><a href=\"#为什么我要选hexo\" class=\"headerlink\" title=\"为什么我要选hexo?\"></a>为什么我要选hexo?</h4><p>一直以来想要自己搭个博客,甚至有想建站搭个动态博客的想法,但是败给了懒……<br>然后在逛一些大大的blog时发现,他们的博文写的好也就算了,为啥界面还这么好看,然后就就发现了hexo这个草鸡漂亮而且方便好用的blog框架,好吧,种草许久了,早就想拔呢,最近这段时间也想把先前写在wiznote中的笔记转出来,好吧,那让我们开始愉快的动手吧。</p>\n<h4 id=\"工具准备（带把小铁锤开始我们的工作吧）\"><a href=\"#工具准备（带把小铁锤开始我们的工作吧）\" class=\"headerlink\" title=\"工具准备（带把小铁锤开始我们的工作吧）\"></a>工具准备（带把小铁锤开始我们的工作吧）</h4><table>\n<thead>\n<tr>\n<th>tool</th>\n<th>link</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>git</td>\n<td><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></td>\n</tr>\n<tr>\n<td>node.js</td>\n<td><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a></td>\n</tr>\n<tr>\n<td>github pages</td>\n<td><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">https://pages.github.com/</a></td>\n</tr>\n</tbody>\n</table>\n<p>上面列举的工具就是我们接下来会用到的啦，请大家根据需要自行去官网下载:-O<br>因为我是用的linux-ubantu,所以git是自带的，我需要准备工具<br>只有node.js呢，当然我会在后面给出相关工具安装使用的帖子，希望能帮到大家。</p>\n<ul>\n<li><p>node.js的安装<br>好吧，Linux下好像不需要装，下载后解压即用，真刺激。需要注意的是为了方便使用，我们最好需要对node,和npm做两个全局的链接。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 我将node.js执行文件解压后放在了 /usr/local/node/呢，当然这个你们随意啦</span><br><span class=\"line\"># ln(link) -s (建一个软链接) 源文件(解压后的目录下的程序）  目标文件(生成的链接文件） </span><br><span class=\"line\">ln -s /usr/local/node-v6.10.2/bin/node /usr/local/bin/node</span><br><span class=\"line\">ln -s /usr/local/node-v6.10.2/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>hexo安装<br>hexo安装命令就在他们的官网首页，相当的简单，just one!</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 可能我们需要给hexo也配置下全局的一个链接，同上</span><br><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>到此我们需要的工具准备完毕了，如果大家在安装过程中遇到了什么困难，可以参考下面的文档或blog</p>\n<blockquote>\n<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo 中文文档</a><br><a href=\"https://segmentfault.com/a/1190000002665530\" target=\"_blank\" rel=\"noopener\">ubantu下安装hexo blog</a></p>\n</blockquote>\n<h4 id=\"开始用它之前尝试了解它吧\"><a href=\"#开始用它之前尝试了解它吧\" class=\"headerlink\" title=\"开始用它之前尝试了解它吧\"></a>开始用它之前尝试了解它吧</h4><p>hexo给我们提供了详尽的文档，很多具体的细节需要我们去通读一遍<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo docs</a>,下面是我自己对文档内容的一些梳理。</p>\n<ul>\n<li>大体步骤<ul>\n<li><a href=\"#create-site\">建站</a></li>\n<li><a href=\"#edit-config\">更改配置文件</a></li>\n<li><a href=\"#writing\">写作</a></li>\n<li><a href=\"#deploy-blog\">部署</a></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"create-site\">建站</h5>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>上面的几条命令是建站的基本命令了，其中npm install默认是安装需要的工具，其中包括了我们的hexo server,所有安装的工具都可以在根目录下的package.json中看到了。<br>hexo init 之后，整个文件夹变为我们的工作目录，目录结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>文件</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>_config.yml</td>\n<td>我们配置的主要信息都在这，网站标题，url，站点存放目录，主题，模板设置等，<a href=\"#detail-config\">详情</a></td>\n</tr>\n<tr>\n<td>package.json</td>\n<td>已经安装的工具信息</td>\n</tr>\n<tr>\n<td>scaffolds</td>\n<td>模板文件，我们的每篇blog肯定有一些相同的内容，如开头的<a href=\"https://hexo.io/zh-cn/docs/front-matter.html\" target=\"_blank\" rel=\"noopener\">front-matter</a>,默认scaffolds文件夹中包含3个模板，post.md,page.md,drafts.md对应了我们三种layout(布局）</td>\n</tr>\n<tr>\n<td>source</td>\n<td>存放一些源文件，包括我们的blog.md,在_post中存放那个的是以hexo [layout,default post] new title.md建立的文件</td>\n</tr>\n<tr>\n<td>themes</td>\n<td>主题，你可以在<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo-themes</a>挑选一个自己喜欢的主题替换默认的landscape,我使用了litten大大的<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">yilia主题</a></td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"edit-config\">修改配置文件</h5>\n\n<p>我们需要简单修改下默认的_config.yml文件，替换为自己的一些信息就可以使用呢，详情<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">参考</a><br>一般来说，我们仅需要修改下面几个相关内容的配置就可以使用了</p>\n<ul>\n<li>网站</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>网站的标题</td>\n</tr>\n<tr>\n<td>description</td>\n<td>网站的描述</td>\n</tr>\n<tr>\n<td>author</td>\n<td>作者</td>\n</tr>\n<tr>\n<td>language</td>\n<td>网站使用的语言</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>网址</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>你blog的url,比如使用的是github pages,那么改为https:username.github.io</td>\n</tr>\n<tr>\n<td>root</td>\n<td>根目录，一般为/，如果你想把部署的静态文件放在网站的二级目录<a href=\"http://www.xxx.com/blog下，设置为/blog\" target=\"_blank\" rel=\"noopener\">www.xxx.com/blog下，设置为/blog</a></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>目录</li>\n</ul>\n<p>配置工作目录的一些信息，比如源文件，标签文件，分类文件存放在那些目录下，对于新手来说，不需要更改此部分的配置</p>\n<ul>\n<li>文章</li>\n</ul>\n<p>对于文章的一些设置，如设置标题格式，文章默认布局，是否显示草稿等</p>\n<h5 id=\"writing\">写作</h5>\n\n<p>我们开始写作时，需要新建一篇文章，使用hexo new ‘xxx.md’,这个命令会在source的_post中生成一个xxx.md文件，我们可以在scaffolds中建立自己的layout模板文件，使用自己的模板新建文章</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># post是我们配置的默认模板，可以省略不写</span><br><span class=\"line\">hexo new post &apos;hexo+github pages搭建个人blog.md&apos;</span><br><span class=\"line\"># 还可以使用自己的模板文件新建文章</span><br><span class=\"line\">hexo new myscaffolds &apos;xxx.md&apos;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://guides.github.com/features/mastering-markdown/\" target=\"_blank\" rel=\"noopener\">markdown 语法</a></p>\n</blockquote>\n<p>对于写好的文章，我们通过<code>hexo g</code>or <code>hexo generate</code>来生成静态文件，这些文件存放在public文件夹中，也是我们需要部署到网站上的文件，包括一些配置文件,html,css,js，img等。</p>\n<h5 id=\"deploy-blog\">部署blog</h5>\n\n<p>部署blog的方式有很多种，官方提供了多样化的部署方式，我们本次采用的方式是基于git部署我们的blog到github page上去，需要安装一个新的工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>修改配置文件_config.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:llcat/llcat.github.io.git</span><br></pre></td></tr></table></figure></p>\n<p>部署<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br><span class=\"line\"># 或者用简称</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"my-error\">使用过程中的一些错误</h5>\n\n<blockquote>\n<p>自己出现的一些错误<br>开启了post_asset_folder: true后<br>将图片放在相应文件夹下时，使用hexo g生成文件时报错如下<br>FATAL ENOTDIR: not a directory, open ‘/home/ypl/StudyNotes/blog/public/java/了解Map容器/2017-04/abstract_map.jpg’<br>说找不到这个文件夹，百度了一圈后发现是在_config.yml文件中一个设置出现了错误，在year-:month后少打了一个反斜线，hexo认为我配置的这个永久链接是个文件，不是文件夹，更改配置如下后正常<br>permalink: :category/:title/:year-:month/</p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/了解Map容器/abstract_map.jpg","slug":"abstract_map.jpg","post":"cjjxxlrpx0006b4htwm59c5vj","modified":0,"renderable":0},{"_id":"source/_posts/了解Map容器/how_to_hash.png","slug":"how_to_hash.png","post":"cjjxxlrpx0006b4htwm59c5vj","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjjxxlrpm0000b4htf93n4rrs","category_id":"cjjxxlrpt0002b4htxud10zgg","_id":"cjjxxlrq1000bb4htm92qd9w5"},{"post_id":"cjjxxlrpq0001b4htpk8nbz4w","category_id":"cjjxxlrpy0007b4httj1iv95a","_id":"cjjxxlrq2000fb4htgfkscy3u"},{"post_id":"cjjxxlrpv0004b4hte0hbvis5","category_id":"cjjxxlrq1000cb4htj464lay6","_id":"cjjxxlrq3000ib4ht4s2j27kh"},{"post_id":"cjjxxlrpw0005b4ht92jn18af","category_id":"cjjxxlrq2000gb4htqk8a5zzv","_id":"cjjxxlrq6000mb4ht9tmo5i5k"},{"post_id":"cjjxxlrpx0006b4htwm59c5vj","category_id":"cjjxxlrq1000cb4htj464lay6","_id":"cjjxxlrq6000pb4htsatky5b5"},{"post_id":"cjjxxlrpz000ab4htmyueeild","category_id":"cjjxxlrq5000lb4htele5xmtk","_id":"cjjxxlrq8000ub4ht4bxswzhf"}],"PostTag":[{"post_id":"cjjxxlrpm0000b4htf93n4rrs","tag_id":"cjjxxlrpu0003b4hth63c38oi","_id":"cjjxxlrpz0009b4htc848xrr3"},{"post_id":"cjjxxlrpq0001b4htpk8nbz4w","tag_id":"cjjxxlrpy0008b4ht3747rbng","_id":"cjjxxlrq2000eb4ht779tlfi7"},{"post_id":"cjjxxlrpv0004b4hte0hbvis5","tag_id":"cjjxxlrq1000db4htbj9wq0vz","_id":"cjjxxlrq6000ob4ht29xyyxzc"},{"post_id":"cjjxxlrpv0004b4hte0hbvis5","tag_id":"cjjxxlrq2000hb4htbsymf3lk","_id":"cjjxxlrq7000qb4htpa6fw4qb"},{"post_id":"cjjxxlrpv0004b4hte0hbvis5","tag_id":"cjjxxlrq3000kb4htkrw9ww2j","_id":"cjjxxlrq7000sb4ht9shpxw79"},{"post_id":"cjjxxlrpw0005b4ht92jn18af","tag_id":"cjjxxlrq6000nb4htde6u3b4m","_id":"cjjxxlrq8000tb4htwd2cfqh2"},{"post_id":"cjjxxlrpx0006b4htwm59c5vj","tag_id":"cjjxxlrq3000kb4htkrw9ww2j","_id":"cjjxxlrq9000xb4htl47fhztq"},{"post_id":"cjjxxlrpx0006b4htwm59c5vj","tag_id":"cjjxxlrq8000vb4htawqul4pe","_id":"cjjxxlrq9000yb4htn8yptp4r"},{"post_id":"cjjxxlrpz000ab4htmyueeild","tag_id":"cjjxxlrq8000wb4htznc2xipg","_id":"cjjxxlrqa0010b4htba3gxiqv"},{"post_id":"cjjxxlrpz000ab4htmyueeild","tag_id":"cjjxxlrq9000zb4htnmyladj0","_id":"cjjxxlrqa0011b4ht3zvxcmbx"}],"Tag":[{"name":"MySQL","_id":"cjjxxlrpu0003b4hth63c38oi"},{"name":"spring","_id":"cjjxxlrpy0008b4ht3747rbng"},{"name":"database","_id":"cjjxxlrq1000db4htbj9wq0vz"},{"name":"web","_id":"cjjxxlrq2000hb4htbsymf3lk"},{"name":"java","_id":"cjjxxlrq3000kb4htkrw9ww2j"},{"name":"echarts","_id":"cjjxxlrq6000nb4htde6u3b4m"},{"name":"collections","_id":"cjjxxlrq8000vb4htawqul4pe"},{"name":"github pages","_id":"cjjxxlrq8000wb4htznc2xipg"},{"name":"hexo","_id":"cjjxxlrq9000zb4htnmyladj0"}]}}